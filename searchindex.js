Search.setIndex({"docnames": ["advanced/implementation", "advanced/performance_valid", "advanced/tensorboard", "advanced/thinning_algo", "dev_guide/model_custom", "generated/easy_tpp.model.tf_model.tf_attnhp", "generated/easy_tpp.model.tf_model.tf_baselayer", "generated/easy_tpp.model.tf_model.tf_basemodel", "generated/easy_tpp.model.tf_model.tf_nhp", "generated/easy_tpp.model.tf_model.tf_thinning", "generated/easy_tpp.model.torch_model.torch_attnhp", "generated/easy_tpp.model.torch_model.torch_baselayer", "generated/easy_tpp.model.torch_model.torch_basemodel", "generated/easy_tpp.model.torch_model.torch_nhp", "generated/easy_tpp.model.torch_model.torch_thinning", "generated/easy_tpp.preprocess.data_collator", "generated/easy_tpp.preprocess.data_loader", "generated/easy_tpp.preprocess.dataset", "generated/easy_tpp.preprocess.event_tokenizer", "generated/easy_tpp.utils.const", "generated/easy_tpp.utils.generic", "generated/easy_tpp.utils.import_utils", "generated/easy_tpp.utils.log_utils", "generated/easy_tpp.utils.metrics", "generated/easy_tpp.utils.misc", "generated/easy_tpp.utils.multiprocess_utils", "generated/easy_tpp.utils.ode_utils", "generated/easy_tpp.utils.registrable", "generated/easy_tpp.utils.tf_utils", "generated/easy_tpp.utils.torch_utils", "get_started/install", "get_started/introduction", "get_started/quick_start", "index", "ref/config", "ref/hpo", "ref/models", "ref/preprocess", "ref/runner", "ref/utils", "ref/wrapper", "user_guide/dataset", "user_guide/run_eval", "user_guide/run_train_pipeline"], "filenames": ["advanced/implementation.rst", "advanced/performance_valid.rst", "advanced/tensorboard.rst", "advanced/thinning_algo.rst", "dev_guide/model_custom.rst", "generated/easy_tpp.model.tf_model.tf_attnhp.rst", "generated/easy_tpp.model.tf_model.tf_baselayer.rst", "generated/easy_tpp.model.tf_model.tf_basemodel.rst", "generated/easy_tpp.model.tf_model.tf_nhp.rst", "generated/easy_tpp.model.tf_model.tf_thinning.rst", "generated/easy_tpp.model.torch_model.torch_attnhp.rst", "generated/easy_tpp.model.torch_model.torch_baselayer.rst", "generated/easy_tpp.model.torch_model.torch_basemodel.rst", "generated/easy_tpp.model.torch_model.torch_nhp.rst", "generated/easy_tpp.model.torch_model.torch_thinning.rst", "generated/easy_tpp.preprocess.data_collator.rst", "generated/easy_tpp.preprocess.data_loader.rst", "generated/easy_tpp.preprocess.dataset.rst", "generated/easy_tpp.preprocess.event_tokenizer.rst", "generated/easy_tpp.utils.const.rst", "generated/easy_tpp.utils.generic.rst", "generated/easy_tpp.utils.import_utils.rst", "generated/easy_tpp.utils.log_utils.rst", "generated/easy_tpp.utils.metrics.rst", "generated/easy_tpp.utils.misc.rst", "generated/easy_tpp.utils.multiprocess_utils.rst", "generated/easy_tpp.utils.ode_utils.rst", "generated/easy_tpp.utils.registrable.rst", "generated/easy_tpp.utils.tf_utils.rst", "generated/easy_tpp.utils.torch_utils.rst", "get_started/install.rst", "get_started/introduction.rst", "get_started/quick_start.rst", "index.rst", "ref/config.rst", "ref/hpo.rst", "ref/models.rst", "ref/preprocess.rst", "ref/runner.rst", "ref/utils.rst", "ref/wrapper.rst", "user_guide/dataset.rst", "user_guide/run_eval.rst", "user_guide/run_train_pipeline.rst"], "titles": ["Model Implementation Details", "Performance validation of EasyTPP models", "Launching the Tensorboard", "Thinning Algorithm for Sampling Event Sequence", "Customize a Model", "easy_tpp.model.tf_model.tf_attnhp", "easy_tpp.model.tf_model.tf_baselayer", "easy_tpp.model.tf_model.tf_basemodel", "easy_tpp.model.tf_model.tf_nhp", "easy_tpp.model.tf_model.tf_thinning", "easy_tpp.model.torch_model.torch_attnhp", "easy_tpp.model.torch_model.torch_baselayer", "easy_tpp.model.torch_model.torch_basemodel", "easy_tpp.model.torch_model.torch_nhp", "easy_tpp.model.torch_model.torch_thinning", "easy_tpp.preprocess.data_collator", "easy_tpp.preprocess.data_loader", "easy_tpp.preprocess.dataset", "easy_tpp.preprocess.event_tokenizer", "easy_tpp.utils.const", "easy_tpp.utils.generic", "easy_tpp.utils.import_utils", "easy_tpp.utils.log_utils", "easy_tpp.utils.metrics", "easy_tpp.utils.misc", "easy_tpp.utils.multiprocess_utils", "easy_tpp.utils.ode_utils", "easy_tpp.utils.registrable", "easy_tpp.utils.tf_utils", "easy_tpp.utils.torch_utils", "Installation", "Introduction", "Quick Start", "<code class=\"docutils literal notranslate\"><span class=\"pre\">EasyTPP</span></code> Documentation", "EasyTPP Config Modules", "EasyTPP Config Modules", "EasyTPP Models", "EasyTPP Preprocess Modules", "EasyTPP Model Runner Modules", "EasyTPP Utilities Modules", "EasyTPP Tf and Torch Wrapper Modules", "Expected Dataset Format and Data Processing", "Evaluate a Model", "Training a Model &amp; Configuration Explanation"], "terms": {"In": [0, 2, 3, 6, 18, 27, 37, 39, 41, 43], "folder": [0, 24, 39, 43], "torch_basemodel": [0, 4], "torch_model": [0, 4, 33], "py": [0, 2, 3, 6, 9, 10, 14, 30, 31, 32, 41, 42, 43], "tf_basemodel": [0, 4], "tf_model": [0, 33], "function": [0, 3, 4, 6, 7, 8, 11, 12, 14, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 31, 37, 39, 43], "sampl": [0, 4, 5, 7, 8, 9, 10, 12, 13, 14, 43], "procedur": [0, 3], "ar": [0, 2, 3, 4, 6, 15, 18, 22, 30, 31, 32, 37, 41, 43], "common": [0, 6, 7, 11, 12], "all": [0, 5, 8, 11, 18, 24, 25, 28, 37, 39, 41, 43], "tpp": [0, 17, 19, 30, 31, 33, 37, 38, 40], "inherit": [0, 4, 27, 39], "class": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 25, 27, 33, 34, 37, 38, 39, 40, 43], "specif": [0, 6, 18, 27, 37, 39, 43], "defin": [0, 3, 6, 11, 18, 37, 38, 40, 43], "explain": 0, "below": [0, 43], "section": 0, "The": [0, 6, 9, 11, 13, 14, 15, 18, 22, 24, 25, 27, 28, 31, 32, 33, 39, 41, 42, 43], "follow": [0, 3, 4, 6, 18, 31, 32, 37, 41, 42, 43], "definit": 0, "equat": [0, 6, 7, 8, 11, 12, 13, 26, 39], "8": [0, 6, 7, 11, 12, 30, 31], "A": [0, 2, 3, 6, 9, 11, 13, 14, 24, 25, 39, 40, 42, 43], "modul": [0, 3, 9, 11, 13, 14, 27, 31, 33], "multivari": [0, 3, 9, 13, 14], "i": [0, 1, 2, 3, 4, 6, 9, 13, 14, 15, 17, 18, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 41, 42, 43], "share": [0, 11], "take": [0, 6, 11, 41], "time_delta_seq": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 41], "lambda_at_ev": [0, 7, 12], "lambdas_loss_sampl": [0, 7, 12], "seq_mask": [0, 7, 12], "lambda_type_mask": [0, 7, 12], "input": [0, 4, 5, 6, 7, 10, 11, 12, 13, 15, 18, 28, 37, 41, 43], "output": [0, 2, 3, 4, 6, 8, 11, 13, 15, 18, 19, 24, 33, 37, 39, 41], "item": [0, 18, 34], "pleas": [0, 18, 30, 31, 37, 43], "see": [0, 15, 18, 31, 37, 43], "It": [0, 24, 39, 43], "note": [0, 3, 6, 18, 27, 37, 39, 41], "1": [0, 1, 3, 6, 8, 9, 11, 13, 14, 18, 26, 28, 29, 30, 31, 33, 37, 39, 41], "sequenti": [0, 5, 10], "predict": [0, 7, 12, 14, 30, 33, 40], "becaus": [0, 27, 39, 41], "we": [0, 1, 2, 3, 4, 27, 28, 29, 30, 31, 32, 33, 39, 40, 41, 42, 43], "perform": [0, 2, 3, 6, 11, 33, 41, 43], "e": [0, 2, 3, 6, 9, 14, 15, 18, 29, 31, 37, 39, 41, 42, 43], "next": [0, 3, 14], "one": [0, 2, 3, 6, 11, 14, 18, 30, 31, 32, 37, 38, 40, 41, 42, 43], "given": [0, 3, 4, 13, 27, 39], "previou": [0, 6, 14], "do": [0, 5, 10, 14, 27, 34, 39, 42, 43], "consid": 0, "last": [0, 3, 6, 8, 12, 14, 18, 28, 37], "ha": [0, 3, 6, 23, 31, 39], "label": [0, 40], "To": [0, 27, 30, 39, 43], "forward": [0, 4, 5, 8, 10, 11, 12, 13], "time_seq": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 41], "type_seq": [0, 5, 7, 8, 9, 10, 12, 13, 41], "For": [0, 3, 6, 11, 14, 43], "differ": [0, 6, 15, 18, 27, 37, 39], "2": [0, 3, 5, 6, 9, 10, 11, 14, 30, 33, 41], "continu": [0, 8, 13, 34], "time": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 22, 25, 31, 39, 42, 43], "evolut": 0, "recal": 0, "dataset": [0, 31, 33, 34, 37, 43], "rst": 0, "assum": [0, 4, 30, 41], "have": [0, 3, 6, 11, 18, 27, 30, 37, 39, 41], "4": [0, 8, 13, 18, 24, 37, 39, 41], "end": [0, 18, 25, 37, 39, 43], "index": [0, 12, 15, 18, 19, 24, 37, 39, 40, 41, 43], "0": [0, 1, 6, 9, 11, 13, 14, 18, 30, 37, 41, 42, 43], "3": [0, 2, 18, 30, 37, 41, 43], "dtime": [0, 3, 7, 8, 12, 13, 14, 41], "t_1": [0, 41], "t_0": [0, 41], "t_2": [0, 41], "t_3": [0, 41], "type": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 23, 24, 25, 27, 28, 29, 34, 37, 38, 39, 40, 41, 42, 43], "e_0": [0, 41], "e_1": [0, 41], "e_2": [0, 41], "e_3": [0, 41], "non_pad_mask": 0, "true": [0, 2, 15, 18, 22, 24, 27, 37, 39, 41, 43], "fals": [0, 2, 6, 8, 11, 12, 14, 15, 18, 24, 27, 37, 38, 39, 41, 42, 43], "th": 0, "denot": [0, 3, 18, 37], "g": [0, 43], "decai": [0, 8, 13], "current": [0, 5, 10, 25, 34, 43], "should": [0, 6, 11, 18], "after": [0, 3, 7, 12, 13, 18, 27, 32, 37, 39, 41, 43], "happen": [0, 13, 27, 39], "therefor": [0, 41], "us": [0, 2, 3, 4, 5, 6, 9, 11, 12, 13, 14, 15, 17, 18, 19, 22, 27, 29, 30, 31, 32, 33, 34, 37, 39, 41, 42, 43], "type_delta_seq": 0, "mask": [0, 5, 6, 7, 10, 11, 12, 18, 37], "specifi": [0, 2, 15, 18, 22, 27, 31, 37, 39, 42, 43], "step": [0, 4, 6, 7, 8, 12, 14, 22, 31, 33], "suppos": 0, "where": [0, 3, 6, 18, 27, 37, 39, 41], "need": [0, 2, 4, 6, 11, 27, 30, 31, 32, 39, 42, 43], "so": [0, 18, 37], "set": [0, 1, 2, 3, 6, 18, 25, 28, 31, 34, 37, 38, 39, 41, 43], "batch_non_pad_mask": [0, 12, 18, 37, 41], "same": [0, 3, 5, 6, 10, 18, 27, 28, 34, 37, 39, 42], "logic": [0, 6, 27, 39], "appli": [0, 6, 11], "code": [0, 3, 4, 6, 9, 10, 14, 41, 42, 43], "typic": [0, 6, 27, 39], "exampl": [0, 2, 18, 27, 31, 32, 37, 39, 42, 43], "call": [0, 6, 8, 10, 11, 13, 18, 20, 22, 27, 37, 39, 43], "event_l": 0, "non_event_l": 0, "num_ev": 0, "compute_loglikelihood": [0, 7, 12], "seq_len": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], "max_len": [0, 6, 9, 11, 14, 18, 37, 41, 43], "lambda_t_sampl": 0, "type_mask": [0, 41], "paramet": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 23, 24, 25, 26, 27, 28, 29, 33, 34, 37, 38, 39, 40], "sum": 0, "log": [0, 19, 38, 39, 42, 43], "thei": [0, 6], "minu": 0, "an": [0, 3, 6, 14, 18, 19, 24, 27, 28, 30, 31, 32, 33, 39, 42, 43], "total": [0, 28, 29, 39], "over": 0, "observ": 0, "interv": [0, 3, 7, 11, 12], "t": [0, 24, 27, 30, 39], "sum_": 0, "t_i": [0, 13], "lambda_": 0, "k_i": 0, "int_0": 0, "lambda": 0, "dt": [0, 26, 39], "first": [0, 6, 27, 28, 30, 39], "term": [0, 5, 13], "refer": [0, 3, 30, 31, 41], "second": [0, 26, 28], "includ": 0, "neg": 0, "sign": 0, "author": [0, 32], "": [0, 6, 15, 18, 22, 24, 28, 29, 32, 37, 39], "offici": [0, 41], "pytorch": [0, 3, 4, 12, 18, 30, 31, 37, 40], "github": [0, 6, 9, 10, 14, 30], "nce": 0, "mpp": 0, "lstm": [0, 8, 13], "introduc": [0, 4], "mainli": 0, "come": [0, 6], "from": [0, 4, 6, 7, 9, 12, 14, 18, 24, 27, 30, 32, 34, 37, 38, 39, 41, 42, 43], "recurs": [0, 3], "updat": [0, 5, 8, 10, 13, 23, 24, 26, 34, 39, 42], "state": [0, 4, 5, 6, 8, 10, 11, 12, 13, 26, 39], "embed": [0, 5, 10, 13], "pass": [0, 6, 11, 18, 37], "cell": [0, 8, 13], "afterward": [0, 11], "anhp": [0, 9, 10, 14], "andtt": [0, 9, 10, 14], "similar": [0, 41], "factor": 0, "faithfulli": 0, "repo": 0, "fix": [0, 18, 37], "version": [0, 6, 30, 31], "veri": 0, "paper": [0, 6, 7, 12, 13], "torch": [0, 2, 4, 10, 13, 18, 20, 28, 29, 30, 33, 37, 39, 42, 43], "ifl": 0, "small": 0, "between": [0, 6, 11, 25, 39], "our": 0, "ignor": [0, 11], "context_init": 0, "initi": [0, 2, 4, 5, 8, 10, 11, 12, 13, 14, 18, 34, 38, 40, 42, 43], "rnn": [0, 8], "data": [0, 4, 13, 15, 17, 18, 24, 32, 33, 34, 37, 38, 39, 40], "setup": [0, 2, 28, 29, 30, 31, 33, 39], "learnabl": 0, "thi": [0, 2, 6, 11, 18, 27, 32, 33, 37, 39, 43], "modif": [0, 18], "make": [0, 18, 37], "littl": [0, 6], "impact": 0, "worth": 0, "thin": [0, 2, 4, 9, 14, 33, 42, 43], "algorithm": [0, 2, 9, 14, 33, 42, 43], "can": [0, 2, 6, 9, 15, 18, 27, 31, 32, 37, 39, 41, 42, 43], "when": [0, 18, 24, 25, 30, 39], "compar": 0, "onli": [0, 6, 8, 13, 14, 15, 18, 30, 37, 41, 43], "look": 0, "its": [0, 2, 6, 9, 14, 27, 39, 41], "likelihood": 0, "curv": 0, "kera": [0, 6, 17, 28, 37], "neuralnetworkpointprocess": 0, "which": [0, 3, 14, 22, 26, 27, 31, 39, 41, 42, 43], "simplifi": 0, "spatio": 0, "blog": 0, "without": [0, 41], "graph": 0, "regular": [0, 6, 11], "name": [0, 2, 11, 24, 27, 28, 29, 31, 34, 39, 41, 43], "run": [1, 2, 11, 31, 32, 33, 38, 40], "experi": [1, 42, 43], "variou": [1, 6], "implement": [1, 4, 6, 9, 10, 13, 14, 31, 33, 41, 43], "each": [1, 3, 4, 6, 8, 9, 11, 13, 14, 24, 31, 39, 41], "train": [1, 2, 6, 28, 30, 33, 34, 38, 40, 41, 42], "max": [1, 14, 18, 24, 37, 39, 41, 43], "number": [1, 2, 3, 6, 11, 14, 24, 28, 29, 39, 41, 42, 43], "epoch": [1, 23, 38, 39, 40], "best": [1, 23, 39, 43], "select": [1, 15, 18, 37], "base": [1, 7, 9, 12, 14, 18, 25, 27, 31, 33, 34, 37, 38, 39, 40, 43], "report": 1, "result": [1, 18, 28, 32, 34, 37, 38, 42], "test": [1, 20, 32, 34, 38, 39, 41, 43], "loglik": [1, 4, 7, 8, 10, 12, 13, 23, 39], "rmse": [1, 2, 34, 43], "acc": [1, 2, 43], "num": [1, 7, 8, 10, 12, 13, 23, 24, 28, 29, 34, 39, 41, 43], "torch_nhp": 1, "93504": 1, "34000": 1, "38656": 1, "200": [1, 2], "tf_nhp": 1, "85774": 1, "34014": 1, "38806": 1, "torch_attnhp": 1, "02001": 1, "33678": 1, "36782": 1, "tf_attnhp": 1, "02315": 1, "33816": 1, "19456": 1, "00593": 1, "33685": 1, "37723": 1, "500": [1, 2, 3, 42, 43], "99827": 1, "33717": 1, "36498": 1, "torch_thp": 1, "tf_thp": 1, "01898": 1, "33677": 1, "37875": 1, "real": [1, 41], "taxi": [1, 2, 32, 43], "here": [2, 4, 6, 18, 32], "present": 2, "how": [2, 4, 32, 43], "within": [2, 11], "easytpp": [2, 3, 4, 7, 10, 12, 13, 30, 31, 32, 41, 43], "framework": [2, 33, 34, 43], "As": 2, "shown": [2, 43], "pipelin": [2, 30, 31, 32, 41, 42, 43], "firstli": [2, 41, 42, 43], "model_config": [2, 3, 4, 7, 8, 10, 12, 13, 34, 40, 42, 43], "yaml": [2, 24, 32, 34, 39, 42, 43], "befor": [2, 6, 11, 13, 22, 27, 39], "evalu": [2, 3, 31, 33, 38, 43], "model": [2, 3, 15, 18, 19, 27, 28, 29, 30, 33, 34, 37, 39, 40, 41], "attribut": [2, 18, 22, 37], "use_tfb": [2, 43], "trainer": [2, 34, 40, 43], "Then": [2, 27, 30, 39, 41], "process": [2, 3, 8, 9, 10, 13, 14, 25, 31, 32, 33, 38, 39, 43], "summari": [2, 40], "writer": [2, 40], "track": [2, 23, 39, 43], "valid": [2, 22, 24, 31, 34, 38, 39, 40, 41, 43], "both": [2, 3, 11, 24, 30, 31, 33, 39], "nhp_train": 2, "base_config": [2, 34, 40, 42, 43], "stage": [2, 32, 40, 42, 43], "backend": [2, 19, 30, 31, 34, 40, 42, 43], "dataset_id": [2, 42, 43], "runner_id": [2, 42, 43], "std_tpp": [2, 42, 43], "model_id": [2, 42, 43], "nhp": [2, 7, 8, 12, 13, 33], "base_dir": [2, 42, 43], "checkpoint": [2, 40, 42, 43], "trainer_config": [2, 34, 40, 43], "batch_siz": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 43], "256": [2, 43], "max_epoch": [2, 43], "shuffl": [2, 43], "optim": [2, 28, 29, 33, 34, 39, 43], "adam": [2, 43], "learning_r": [2, 43], "valid_freq": [2, 43], "metric": [2, 33, 38, 39, 40, 43], "seed": [2, 6, 11, 28, 29, 39, 42, 43], "2019": [2, 42, 43], "gpu": [2, 28, 29, 39, 42, 43], "hidden_s": [2, 5, 6, 8, 10, 11, 42, 43], "64": 2, "loss_integral_num_sample_per_step": [2, 42, 43], "20": [2, 42, 43], "pretrained_model_dir": [2, 42], "75518_4377527680_230530": 2, "132355": 2, "saved_model": [2, 42, 43], "num_seq": [2, 3, 42, 43], "10": [2, 3, 18, 37, 42, 43], "num_sampl": [2, 3, 5, 7, 8, 9, 10, 12, 13, 14, 42, 43], "num_exp": [2, 3, 9, 14, 42, 43], "d": [2, 3, 14, 18, 42, 43], "exp": [2, 3, 14, 42, 43], "intensity_bound": [2, 3, 14, 42, 43], "draw": [2, 3, 9, 14, 42, 43], "look_ahead_tim": [2, 3, 42, 43], "patience_count": [2, 3, 14, 42, 43], "5": [2, 3, 18, 37, 41, 42, 43], "maximum": [2, 3, 14, 15, 18, 37, 42, 43], "iter": [2, 3, 14, 31, 41, 42, 43], "adapt": [2, 3, 14, 42, 43], "over_sample_r": [2, 3, 14, 42, 43], "num_samples_boundari": [2, 3, 14, 42, 43], "dtime_max": [2, 3, 14, 42, 43], "num_step_gen": [2, 3, 42, 43], "simpli": [2, 3, 32, 43], "go": [2, 40], "runner": [2, 19, 31, 33, 34, 39, 40, 42, 43], "directori": [2, 32, 42, 43], "find": [2, 9, 12, 14, 43], "out": [2, 12, 22, 24, 34, 39, 42], "address": 2, "complet": [2, 19, 38, 39, 42, 43], "seen": [2, 3, 42, 43], "run_tensorboard": 2, "import": [2, 4, 42, 43], "o": 2, "def": [2, 4, 27, 39, 42, 43], "main": [2, 42, 43], "dir": [2, 24, 31, 32, 34, 38, 39, 42, 43], "log_dir": 2, "nhp_train_taxi_20220527": 2, "18": 2, "30": 2, "tfb_train": 2, "system": 2, "logdir": 2, "format": [2, 19, 22, 24, 25, 31, 33, 34, 39], "return": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 34, 37, 38, 39, 40], "__name__": [2, 42, 43], "__main__": [2, 42, 43], "depict": 3, "neural": [3, 8, 9, 10, 13, 14, 19, 30, 31, 33], "hawk": [3, 8, 9, 10, 13, 14, 33], "self": [3, 4, 9, 13, 14, 18, 27, 33, 34, 37, 39], "point": [3, 7, 9, 12, 13, 14, 33], "tensorflow": [3, 4, 6, 17, 18, 20, 28, 30, 31, 37, 40, 43], "torch_thin": 3, "tf_thin": 3, "basic": [3, 33, 40], "correspond": [3, 6, 14, 27, 34, 38, 39, 41, 43], "draw_next_time_one_step": [3, 14], "consist": [3, 31], "comput": [3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 22], "upper": [3, 9, 14], "bound": [3, 9, 14], "intens": [3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 33], "timestamp": [3, 8, 9, 10, 13, 14, 25, 41, 43], "compute_intensity_upper_bound": [3, 9, 14], "some": [3, 27, 34, 39, 41, 43], "insid": [3, 43], "matrix": [3, 5, 6, 7, 10, 11, 12, 18, 37], "predic": 3, "exponenti": [3, 14], "distribut": [3, 14], "sample_exp_distribut": [3, 9, 14], "divid": 3, "standard": [3, 6, 38], "equival": [3, 31], "sample_r": [3, 9, 14], "accord": [3, 13, 15, 18, 37], "properti": [3, 34], "random": [3, 6, 11, 14, 28, 29, 39], "variabl": [3, 6], "size": [3, 5, 8, 10, 13, 18, 37], "everi": [3, 7, 11, 12], "propos": 3, "final": [3, 41], "uniform": [3, 14], "accept": [3, 9, 14, 15, 18, 37, 43], "certain": 3, "probabl": 3, "sample_accept": [3, 9, 14], "earliest": 3, "unaccept": 3, "boundari": [3, 9, 14], "maxsampletim": [3, 9, 14], "along": [3, 4, 27, 39], "equal": [3, 18, 26, 37, 39], "weight": [3, 6, 11, 14], "vector": [3, 7, 11, 12, 13, 18, 37, 41], "product": 3, "By": [3, 30, 31, 41, 43], "default": [3, 6, 8, 10, 12, 13, 14, 15, 18, 24, 25, 27, 28, 29, 30, 31, 34, 37, 38, 39, 41, 42, 43], "onc": 3, "algo": [3, 14], "config": [3, 7, 8, 10, 12, 13, 18, 24, 27, 31, 32, 33, 37, 38, 39, 40], "part": [3, 25, 39], "prefix": 3, "prediction_event_one_step": 3, "basemodel": [3, 12, 38, 40], "torchbasemodel": [3, 4, 12], "tfbasemodel": [3, 4, 7], "activ": [3, 6, 11, 30, 33], "bigger": 3, "than": [3, 18, 23, 27, 30, 37, 39], "Be": [3, 41], "gener": [3, 6, 7, 12, 17, 24, 25, 26, 33, 34, 37, 39, 41, 43], "non": [3, 7, 12, 18, 37], "pad": [3, 7, 12, 15, 18, 19, 24, 31, 37, 39, 43], "predict_multi_step_since_last_ev": [3, 7, 12], "singl": [3, 15, 18, 37], "support": [4, 6, 28, 29, 30, 31, 39], "build": [4, 5, 6, 7, 8, 31, 38], "easy_tpp": [4, 33, 37, 39, 41, 42, 43], "interfac": 4, "newmodel": 4, "__init__": [4, 6, 8, 10, 11, 12, 13, 14, 15, 17, 18, 23, 25, 27, 34, 37, 38, 39, 40], "super": 4, "sequenc": [4, 5, 7, 8, 9, 10, 12, 14, 15, 17, 18, 31, 37, 43], "event": [4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 22, 37, 41, 43], "batch": [4, 8, 10, 12, 13, 15, 18, 24, 31, 37, 39, 40, 41], "loglikelihood": [4, 7, 12], "loss": [4, 8, 10, 13, 19, 40], "loglike_loss": [4, 8, 10, 13], "sampler": [4, 9, 14], "compute_intensities_at_sample_tim": [4, 5, 8, 10, 13], "sample_tim": [4, 5, 10], "kwarg": [4, 5, 6, 7, 8, 9, 10, 11, 13, 17, 34, 37, 38], "If": [4, 6, 18, 22, 27, 30, 31, 37, 39, 43], "start": [4, 25, 38, 39, 41, 43], "tf": [4, 6, 15, 17, 18, 20, 28, 33, 37], "There": [4, 32], "three": [4, 8, 41], "loglikihood": 4, "attnhp": [5, 10, 33, 41], "arg": [5, 6, 7, 8, 9, 11, 24, 39, 42, 43], "sourc": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 34, 37, 38, 39, 40, 41], "make_div_term": 5, "divis": 5, "tempor": [5, 10, 11, 33], "np": [5, 15, 18, 20, 24, 37, 39], "arrai": [5, 6, 18, 20, 24, 37, 39], "build_graph": [5, 8], "up": [5, 6, 7, 8, 14, 18, 37, 38], "network": [5, 7, 8, 33], "compute_temporal_embed": [5, 10], "tensor": [5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 20, 26, 28, 37, 39], "emb_siz": [5, 10], "seq_encod": [5, 10], "encod": [5, 6, 10, 11, 15, 18, 37], "seq": [5, 10, 13, 14, 18, 37, 41], "event_seq": [5, 8, 10, 14, 41], "_type_": [5, 10], "tupl": [5, 6, 7, 8, 10, 12, 13, 14, 19, 40], "make_layer_mask": [5, 10], "attention_mask": [5, 6, 10, 18, 37, 41], "creat": [5, 6, 10, 24, 28, 30, 32, 33, 39], "layer": [5, 6, 8, 10, 11, 13], "attent": [5, 10, 18, 33, 37, 41], "oper": [5, 10, 22, 26], "aim": [5, 10], "keep": [5, 10, 24, 30, 39], "diagon": [5, 10], "make_combined_att_mask": [5, 10], "layer_mask": [5, 10], "combin": [5, 10], "other": [5, 10, 23, 27, 31, 39], "forward_pass": [5, 10], "init_cur_lay": [5, 10], "time_emb": [5, 10], "sample_time_emb": [5, 10], "event_emb": [5, 10], "combined_mask": [5, 10], "structur": [5, 10, 32, 33, 43], "none": [5, 6, 8, 9, 10, 11, 12, 14, 15, 18, 22, 27, 34, 37, 38, 39], "move": [5, 8], "through": [5, 8], "compute_states_at_sample_tim": [5, 10, 13], "hidden": [5, 8, 10, 12, 13], "num_event_typ": [5, 7, 12, 13, 41, 43], "gelu": [6, 11], "x": [6, 11, 20, 28, 30, 39], "gaussian": 6, "error": [6, 19, 24, 27, 28, 29, 39], "linear": [6, 13], "unit": [6, 11, 25, 39], "smoother": 6, "relu": [6, 11], "origin": 6, "http": [6, 9, 10, 12, 13, 14, 30, 32], "arxiv": [6, 9, 10, 13, 14], "org": [6, 9, 10, 13, 14], "ab": [6, 9, 10, 13, 14], "1606": 6, "08415": 6, "param": [6, 11, 27, 28, 29, 31, 38, 39], "float": [6, 11, 13, 14, 18, 23, 28, 29, 37, 39], "append_tensor_alia": 6, "alia": 6, "append": [6, 22], "list": [6, 10, 11, 13, 14, 15, 18, 24, 26, 27, 28, 31, 37, 39, 41], "alias": 6, "string": [6, 22, 24, 25, 39], "add": [6, 18, 24, 30, 39], "new": [6, 24, 33, 39], "layernorm": 6, "ref": [6, 12], "com": [6, 9, 10, 12, 14, 30, 32], "shenweichen": 6, "deepctr": 6, "blob": [6, 9, 10, 14], "master": [6, 9, 10, 14, 25, 39], "normal": 6, "input_shap": 6, "option": [6, 8, 10, 13, 14, 15, 18, 24, 27, 28, 29, 34, 37, 38, 39], "subclass": [6, 11, 27, 39], "method": [6, 18, 25, 26, 27, 33, 37, 39], "overrid": 6, "creation": 6, "instanti": [6, 27, 39], "instanc": [6, 11, 18, 27, 39], "tensorshap": 6, "expect": 6, "per": 6, "live": 6, "bit": 6, "api": 6, "you": [6, 18, 27, 30, 32, 37, 39], "addit": 6, "argument": [6, 11, 15, 18, 19, 27, 37, 39, 43], "wherea": 6, "compute_mask": 6, "dict": [6, 8, 17, 18, 24, 29, 31, 34, 37, 38, 39, 40, 41], "posit": [6, 11, 12, 19, 41], "subject": 6, "special": 6, "rule": 6, "must": [6, 27, 28, 39], "explicitli": 6, "cannot": [6, 27, 39], "zero": [6, 8, 41], "provid": [6, 15, 18, 30, 31, 32, 37, 41, 43], "via": [6, 14], "valu": [6, 11, 14, 15, 18, 19, 23, 24, 28, 34, 37, 39, 41], "keyword": 6, "numpi": [6, 18, 20, 37, 39], "python": [6, 11, 18, 27, 30, 31, 32, 37, 39], "scalar": 6, "get": [6, 18, 25, 27, 34, 37, 39], "cast": 6, "metadata": 6, "collect": 6, "built": [6, 31], "shape": [6, 11, 26, 28, 39], "info": 6, "input_spec": 6, "compat": [6, 31, 33, 34], "check": [6, 24, 25, 34, 39], "against": 6, "mix": 6, "precis": 6, "behavior": 6, "handl": 6, "manual": 6, "savedmodel": 6, "integr": 6, "ecosystem": 6, "packag": [6, 31], "like": [6, 18, 25, 27, 39], "tfmot": 6, "tflite": 6, "j": 6, "etc": [6, 18], "mai": 6, "contain": [6, 24, 31, 33, 39, 41], "although": [6, 11], "recommend": 6, "reason": 6, "abov": [6, 15, 18, 37], "reserv": 6, "boolean": 6, "indic": [6, 18, 37, 41], "whether": [6, 8, 11, 13, 14, 18, 23, 34, 37, 38, 39], "meant": 6, "infer": 6, "did": 6, "came": 6, "multiheadattent": [6, 11], "attention_input": 6, "kv": 6, "output_weight": [6, 11], "densedropoutlayernorm": 6, "encoderlay": [6, 11], "timepositionalencod": [6, 11], "5000": [6, 11], "www": 6, "text": [6, 18, 22, 37], "tutori": [6, 43], "transform": [6, 18, 27, 33, 37, 39], "the_encoder_lay": 6, "int": [6, 7, 8, 12, 13, 14, 15, 18, 23, 24, 27, 28, 29, 34, 37, 39, 40], "thp": [6, 11, 33], "timeshiftedpositionalencod": [6, 11], "shift": [6, 11, 27, 39], "sahp": [6, 11, 33], "dnn": [6, 11], "multi": [6, 7, 11, 12, 33], "percetron": [6, 11], "nd": [6, 11], "input_dim": [6, 11], "most": [6, 11, 27, 39], "situat": [6, 11], "would": [6, 11, 27, 39], "2d": [6, 11], "hidden_unit": 6, "integ": [6, 11, 18, 37, 41], "l2_reg": [6, 11], "l2": [6, 11], "strength": [6, 11], "kernel": [6, 11], "dropout_r": [6, 11], "fraction": [6, 11], "dropout": [6, 11, 42, 43], "use_bn": [6, 11], "bool": [6, 8, 11, 13, 14, 15, 18, 23, 24, 25, 27, 34, 37, 38, 39], "batchnorm": [6, 11], "output_activ": 6, "build_input_graph": 7, "static": [7, 8, 12, 18, 34, 37, 38], "generate_model_from_config": [7, 12], "deriv": [7, 12, 18], "spec": [7, 8, 10, 12, 13, 34, 40, 43], "make_dtime_loss_sampl": [7, 12], "n_sampl": [7, 12], "unmask": [7, 12], "right": [7, 12, 13, 18, 37, 43], "predict_one_step_at_every_ev": [7, 12], "One": [7, 12, 33, 43], "num_step": [7, 12], "conttimelstmcel": [8, 13], "init_dense_lay": [8, 13], "relat": [8, 31, 43], "dens": 8, "init_st": [8, 13], "four": 8, "x_t": 8, "dtime_t": 8, "initial_st": 8, "cell_i": [8, 13], "cell_bar_i": [8, 13], "gate_decai": [8, 13], "gate_output": [8, 13], "7": [8, 13, 18, 30, 37, 43], "bar": [8, 13], "delta": [8, 10, 13, 14], "dynamic_run": 8, "seq_type_emb": 8, "dtimes_seq": 8, "len_seq": 8, "compute_states_at_sampled_tim": 8, "decay_st": [8, 13], "sample_dtim": [8, 10, 13], "compute_last_step_onli": [8, 9, 14], "sampled_dtim": [8, 10], "event_num": [8, 10], "eventsampl": [9, 14], "found": [9, 31, 32, 41], "1612": [9, 13, 14], "09328": [9, 13, 14], "yangalan123": [9, 10, 14], "esm": [9, 14], "intensity_fn": [9, 14], "exp_numb": 9, "sample_uniform_distribut": [9, 14], "intensity_upper_bound": [9, 14], "unif_numb": [9, 14], "total_intens": [9, 14], "parallel": [9, 14], "min": [9, 14], "criterion": [9, 14], "1st": [9, 14], "smallest": [9, 14], "cri": [9, 14], "iclr": 10, "2022": 10, "2201": 10, "00044": 10, "xfmr_nhp_fast": 10, "modelconfig": [10, 12, 13, 33, 34, 40], "n_head": 11, "d_input": 11, "d_model": 11, "output_linear": 11, "intern": 11, "nn": [11, 13, 29, 39], "scriptmodul": 11, "queri": 11, "kei": [11, 18, 23, 24, 27, 31, 33, 34, 39, 41], "overridden": 11, "recip": 11, "instead": [11, 18, 27, 37, 39], "sinc": [11, 12], "former": 11, "care": 11, "regist": [11, 27, 39, 43], "hook": 11, "while": [11, 42], "latter": 11, "silent": 11, "them": [11, 27, 39, 41], "sublayerconnect": 11, "sublay": 11, "self_attn": 11, "feed_forward": 11, "use_residu": 11, "icml": 11, "2020": 11, "model_dim": 11, "ident": 11, "activation_lay": 11, "act_nam": 11, "construct": [11, 27, 31, 39, 41, 43], "str": [11, 15, 18, 23, 24, 25, 27, 28, 29, 34, 37, 39, 40, 42, 43], "act_lay": 11, "inputs_dim": 11, "init_std": 11, "0001": 11, "featur": [11, 33], "dimens": [11, 18, 28], "get_logits_at_last_step": 12, "logit": 12, "sample_len": 12, "retriev": [12, 34], "hidden_dim": [12, 13], "medium": 12, "analyt": 12, "vidhya": 12, "understand": 12, "gather": 12, "33717a84ebc4": 12, "eo": 12, "beta": 13, "neurip": 13, "17": 13, "dim": [13, 18, 26, 37, 39], "softplu": 13, "bia": 13, "5a": 13, "6c": 13, "x_i": 13, "hidden_i_minu": 13, "cell_i_minu": 13, "cell_bar_i_minus_1": 13, "t_": 13, "gate": 13, "2017": 13, "stack": 13, "max_seq_length": 13, "inter": [13, 31], "num_tim": 13, "num_mc_sampl": 13, "multipli": 14, "fn": [14, 34], "wheter": 14, "pnly": 14, "rate": [14, 28, 29, 39], "two": [14, 25, 28, 31, 39, 42, 43], "who_has_accepted_tim": 14, "dtime_boundari": 14, "timestep": 14, "tppdatacol": [15, 17, 37], "token": [15, 17, 18, 37, 41], "eventtoken": [15, 18, 19, 33, 37, 39], "paddingstrategi": [15, 18, 19, 33, 37, 39], "max_length": [15, 18, 37], "truncat": [15, 18, 19, 37, 39, 43], "truncationstrategi": [15, 18, 19, 33, 37, 39], "return_tensor": [15, 18, 19, 37], "pt": [15, 18, 37], "collat": [15, 17, 18, 37], "dynam": [15, 28], "util": [15, 17, 18, 33, 37], "strategi": [15, 18, 37], "side": [15, 18, 37], "among": [15, 18, 37, 41], "longest": [15, 18, 37], "length": [15, 18, 37, 41, 43], "do_not_pad": [15, 18, 37], "No": [15, 18, 37], "allow": [15, 27, 39], "tppdataset": [17, 33, 37], "to_tf_dataset": [17, 37], "data_col": [17, 33, 37], "rais": [17, 23, 24, 28, 29, 37, 39], "importerror": [17, 37], "instal": [17, 20, 33, 37, 39], "object": [17, 18, 24, 27, 34, 37, 38, 39, 40, 41, 42, 43], "batchencod": [18, 37, 40], "ani": [18, 24, 27, 34, 37, 39], "tensor_typ": 18, "tensortyp": [18, 19, 37], "prepend_batch_axi": 18, "hold": [18, 24, 39], "__call__": [18, 19, 37, 39], "encode_plu": 18, "dictionari": [18, 22, 37], "batch_encode_plu": 18, "input_id": 18, "union": 18, "give": [18, 27, 38, 39], "convert": 18, "axi": [18, 28], "n_sequenc": 18, "view": 18, "convert_to_tensor": 18, "inner": 18, "content": 18, "enum": [18, 19, 38, 39], "done": 18, "dure": [18, 37, 43], "convers": 18, "devic": [18, 20, 28, 29, 37, 39], "send": 18, "v": 18, "put": [18, 43], "vendor": [18, 37], "huggingfac": [18, 37], "encoded_input": [18, 37], "return_attention_mask": [18, 37], "verbos": [18, 37], "predefin": [18, 37], "left": [18, 37], "id": [18, 19, 25, 34, 37, 39, 42, 43], "level": [18, 31, 37], "padding_sid": [18, 37, 43], "pad_token_id": [18, 37, 43], "pad_token_type_id": [18, 37], "fast": [18, 37], "faster": [18, 37], "tip": [18, 37], "unless": [18, 37], "case": [18, 27, 37, 39], "lose": [18, 37], "your": [18, 37], "howev": [18, 37], "repres": [18, 37, 41], "well": [18, 31, 37], "dataload": [18, 31, 37, 38], "return_output": [18, 37], "constant": [18, 37], "ndarrai": [18, 20, 37], "print": [18, 37, 42], "more": [18, 19, 31, 32, 37, 39, 41], "inform": [18, 22, 37, 43], "warn": [18, 37], "make_pad_sequ": [18, 37], "dtype": [18, 20, 37], "float32": [18, 37], "group_by_event_typ": [18, 37], "wise": [18, 31, 37], "variat": [18, 37], "event_num_with_pad": [18, 37], "pad_at_end": [18, 37], "sequnc": [18, 37], "begin": [18, 37], "pad_sequ": [18, 37], "100": [18, 37, 43], "make_attn_mask_for_pad_sequ": [18, 37], "pad_seq": [18, 37], "been": [18, 23, 37, 39], "6": [18, 37, 41, 43], "12": [18, 37], "9": [18, 37, 41], "pad_index": [18, 24, 37, 39], "make_type_mask_for_pad_sequ": [18, 37], "hot": [18, 37, 41], "explicitenum": [19, 33, 39], "explicit": [19, 39], "messag": [19, 22, 24, 39], "miss": [19, 39], "possibl": [19, 39], "tab": [19, 39], "eventtokenizerbas": 19, "runnerphas": [19, 33, 39, 40], "phase": [19, 38, 39, 40], "lossfunct": 19, "logconst": [19, 33, 39], "handler": [19, 39], "predoutputindex": 19, "modelrunn": [19, 42], "is_tensor": 20, "jaxlib": 20, "xla_extens": 20, "devicearrai": 20, "is_numpy_arrai": [20, 33, 39], "is_torch_tensor": 20, "safe": [20, 39], "even": [20, 39], "is_torch_devic": [20, 33, 39], "is_torch_dtyp": 20, "is_tf_tensor": 20, "is_tf_symbolic_tensor": 20, "symbol": 20, "ie": 20, "eager": 20, "customformatt": 22, "fmt": 22, "datefmt": 22, "style": 22, "record": [22, 23, 39, 43], "operand": 22, "yield": 22, "coupl": [22, 31], "preparatori": 22, "carri": 22, "logrecord": 22, "getmessag": 22, "determin": 22, "usestim": 22, "formattim": 22, "except": 22, "formatexcept": 22, "metricstrack": [23, 33, 39], "update_best": [23, 39], "notimplementederror": [23, 28, 29, 39], "py_assert": [24, 33, 39], "condit": [24, 39], "exception_typ": [24, 39], "msg": [24, 39], "assert": [24, 39], "ensur": [24, 39], "otherwis": [24, 39], "throw": [24, 27, 39], "formula": [24, 39], "_standarderror": [24, 39], "valueerror": [24, 39], "doe": [24, 39], "make_config_str": [24, 33, 39], "max_num_kei": [24, 39], "file": [24, 25, 27, 31, 33, 34, 38, 39, 41], "configur": [24, 30, 31, 33, 39, 42], "concat": [24, 39], "concaten": [24, 39, 43], "save_yaml_config": [24, 33, 39], "save_dir": [24, 39], "save": [24, 32, 34, 38, 39, 40, 42, 43], "path": [24, 25, 27, 34, 39, 40], "target": [24, 28, 34, 39], "load_yaml_config": [24, 33, 39], "config_dir": [24, 39, 42, 43], "load": [24, 34, 39, 40, 43], "disk": [24, 34, 39], "create_fold": [24, 33, 39], "doesn": [24, 39], "exist": [24, 27, 39], "load_pickl": [24, 33, 39], "file_dir": [24, 39], "pickl": [24, 39, 41], "binaryio": [24, 39], "save_pickl": [24, 33, 39], "object_to_sav": [24, 39], "has_kei": [24, 33, 39], "target_dict": [24, 39], "target_kei": [24, 39], "array_pad_col": [24, 33, 39], "arr": [24, 39], "max_num_col": [24, 39], "column": [24, 39], "col": [24, 39], "fill": [24, 28, 39], "element": [24, 28, 39, 41], "concat_el": [24, 33, 39], "dict_deep_upd": [24, 33, 39], "is_add_new_kei": [24, 39], "deepli": [24, 39], "copi": [24, 32, 34, 39, 42, 43], "identifi": [24, 25, 39], "duplic": [24, 39], "is_master_process": [25, 33, 39], "machin": [25, 39], "is_local_master_process": [25, 33, 39], "local": [25, 38, 39], "get_now_timestamp_id": 25, "yymmdd_hhmmss": 25, "get_unique_id": 25, "uniqu": [25, 38], "pid": 25, "thread": 25, "parse_uri_to_protocol_and_path": [25, 33, 39], "uri": [25, 39], "pars": [25, 34, 39], "protocol": [25, 34, 39], "lack": [25, 39], "resourc": [25, 39], "whose": [25, 26, 30, 39, 42], "access": [25, 27, 39], "locat": [25, 39], "timer": [25, 33, 39], "m": [25, 39], "count": [25, 28, 29, 39], "elaps": [25, 39], "ode_update_op": 26, "z0": [26, 39], "dz": 26, "solv": [26, 39], "od": [26, 33, 39], "t0": [26, 39], "differenti": [26, 39], "t1": [26, 39], "euler_step_method": 26, "diff_func": [26, 39], "euler": 26, "rk2_step_method": 26, "order": [26, 27, 39], "rung": [26, 39], "kutta": [26, 39], "rk4_step_method": [26, 33, 39], "fourth": [26, 39], "gain": [27, 39], "registri": [27, 39], "just": [27, 39], "decor": [27, 39], "classmethod": [27, 39], "baseclass": [27, 39], "list_avail": [27, 39], "by_nam": [27, 39], "store": [27, 39], "themselv": [27, 39], "from_param": [27, 39], "constructor": [27, 39], "overwrit": [27, 39], "under": [27, 39], "particular": [27, 39], "els": [27, 39], "alreadi": [27, 39], "want": [27, 30, 31, 39], "shifttransform": [27, 39], "param1": [27, 39], "param2": [27, 39], "let": [27, 39, 42], "work": [27, 31, 39], "those": [27, 39], "annot": [27, 39], "either": [27, 31, 39], "sever": [27, 39], "could": [27, 33, 39], "taken": [27, 39], "from_inst": [27, 39], "from_fil": [27, 39], "some_param": [27, 39], "cl": [27, 34, 39], "some_other_param": [27, 39], "still_other_param": [27, 39], "callabl": [27, 39], "isn": [27, 39], "necessarili": [27, 39], "resolve_class_nam": [27, 39], "wa": [27, 39], "also": [27, 39], "fulli": [27, 30, 31, 33, 39], "ad": [27, 39], "separ": [27, 39], "tell": [27, 39], "u": [27, 39], "what": [27, 39], "set_se": [28, 29, 33, 39], "1029": [28, 29, 39], "set_devic": [28, 29, 33, 39], "set_optim": [28, 29, 33, 39], "lr": [28, 29, 39], "learn": [28, 29, 33, 39], "wrong": [28, 29, 39], "optimz": 28, "get_shape_list": 28, "deal": 28, "cleanli": 28, "tensordot": 28, "tensor_a": 28, "tensor_b": 28, "dot": 28, "swap_ax": 28, "axis1": 28, "axis2": 28, "interchang": 28, "ax": 28, "create_tensor": 28, "count_model_param": [28, 29, 33, 39], "cpu": [29, 39], "moduel": [29, 39], "open": [30, 31, 32, 33, 41], "librari": [30, 31], "autom": [30, 31], "13": [30, 31, 42], "environ": 30, "least": 30, "greater": 30, "don": 30, "document": 30, "anaconda": 30, "conda": 30, "n": 30, "addition": [30, 31], "git": 30, "clone": 30, "ant": 30, "research": [30, 33, 41], "cd": 30, "respect": 31, "At": [31, 32], "compon": 31, "design": 31, "loos": 31, "flexibl": 31, "user": 31, "develop": 31, "custom": [31, 33], "descript": 31, "preprocess": [31, 33, 40, 41], "raw": [31, 34, 41], "sota": 31, "detail": [31, 32, 33, 43], "encapsul": 31, "control": 31, "pip": 31, "requir": [31, 33, 42, 43], "gatech": [31, 41], "time_since_last_ev": [31, 41], "time_since_start": [31, 41], "type_ev": [31, 41], "feed": [31, 40], "pseudo": 31, "data_load": [31, 33, 38], "datatset": 31, "explan": 31, "launch": [31, 33, 43], "script": [31, 32, 33], "whole": [31, 41, 43], "show": [32, 43], "pre": 32, "hypro": 32, "pkl": [32, 43], "preset": [32, 43], "experiment_config": [32, 42, 43], "write": [32, 40], "train_nhp": [32, 43], "______taxi": 32, "____": 32, "dev": [32, 34, 38, 41, 43], "______experiment_config": 32, "command": 32, "misc": [32, 33], "whong": 32, "14": 32, "titl": 32, "f": 32, "oil": 32, "ing": 32, "nyc": 32, "trip": 32, "chri": 32, "year": 32, "2014": 32, "url": 32, "chriswhong": 32, "foil_nyc_taxi": 32, "easi": 33, "applic": 33, "toolkit": 33, "reproduc": 33, "hope": 33, "project": 33, "benefit": 33, "practition": 33, "goal": 33, "easili": 33, "benchmark": [33, 41], "introduct": 33, "prepar": 33, "qucick": 33, "download": 33, "checkout": 33, "rewrit": 33, "relev": 33, "tensorboard": [33, 40, 43], "usag": 33, "simul": 33, "recurr": 33, "mark": 33, "rmtpp": [33, 42, 43], "free": 33, "intensityfre": 33, "fullynn": 33, "odetpp": 33, "anhn": 33, "dataconfig": [33, 34], "dataspecconfig": [33, 34], "baseconfig": [33, 34], "runnerconfig": [33, 34, 38, 42], "hpoconfig": [33, 34], "hporunnerconfig": [33, 34], "event_token": [33, 41], "tpprunner": [33, 38], "hyper": 33, "wrapper": 33, "tfmodelwrapp": [33, 40], "torchmodelwrapp": [33, 40], "registr": [33, 34, 38, 39], "const": [33, 40], "import_util": 33, "log_util": 33, "ode_util": 33, "multiprocess_util": 33, "tf_util": 33, "torch_util": 33, "config_factori": [34, 42, 43], "save_to_yaml_fil": 34, "filenam": 34, "build_from_yaml_fil": [34, 42, 43], "yaml_fn": 34, "abstract": 34, "get_yaml_config": 34, "parse_from_yaml_config": 34, "yaml_config": 34, "freeli": 34, "modifi": 34, "pop": 34, "default_var": 34, "var_to_set": 34, "train_dir": [34, 43], "valid_dir": [34, 43], "test_dir": [34, 43], "tran": 34, "get_data_dir": 34, "split": 34, "notat": 34, "set_backend": 34, "data_config": [34, 42, 43], "trainerconfig": [34, 40], "ensure_valid_config": 34, "saniti": 34, "about": 34, "avoid": 34, "conflict": 34, "update_config": 34, "get_metric_funct": 34, "get_metric_direct": 34, "metric_nam": 34, "framework_id": 34, "storage_uri": 34, "is_continu": 34, "num_trial": 34, "num_job": 34, "hpo": 34, "storag": 34, "trail": 34, "job": 34, "storage_protocol": 34, "storage_path": 34, "hpo_config": 34, "runner_config": [34, 38, 43], "unique_model_dir": 38, "build_from_config": [38, 42, 43], "get_config": 38, "set_model_dir": 38, "model_dir": 38, "get_model_dir": 38, "train_load": 38, "valid_load": 38, "test_load": 38, "loader": 38, "_description_": 38, "gen": [38, 42], "gen_load": 38, "save_log": 38, "run_one_epoch": 38, "tf_wrapper": 40, "restor": 40, "ckpt_dir": 40, "write_summari": 40, "kv_pair": 40, "kv_pari": 40, "close_summari": 40, "close": 40, "run_batch": 40, "torch_wrapp": 40, "dim_process": 41, "idx_ev": 41, "0267814": 41, "time_since_last_same_ev": 41, "4029268": 41, "4297082": 41, "sub": 41, "absolut": 41, "rel": 41, "wide": 41, "googl": 41, "drive": 41, "fed": 41, "time_pad": 41, "type_pad": 41, "unus": 41, "calcul": 41, "attend": 41, "past": 41, "six": 41, "mechan": 41, "event_tokn": 41, "11": 41, "becom": 41, "0000": 41, "8252": 41, "3806": 41, "8349": 41, "5554": 41, "4542": 41, "runnabl": 41, "rmtpp_gen": 42, "retweet": 42, "32": [42, 43], "time_emb_s": [42, 43], "16": [42, 43], "mc_num_sample_per_step": [42, 43], "sharing_param_lay": [42, 43], "use_ln": [42, 43], "2555_4348724608_230603": 42, "155841": 42, "example_config": [42, 43], "eval_nhp": 42, "argpars": [42, 43], "parser": [42, 43], "argumentpars": [42, 43], "add_argu": [42, 43], "help": [42, 43], "experiment_id": [42, 43], "rmtpp_eval": 42, "parse_arg": [42, 43], "model_runn": [42, 43], "consol": 42, "output_config_dir": [42, 43], "nhp_test_conttime_20221002": 42, "19": 42, "23": 42, "nhp_test_output": 42, "principl": 43, "guid": 43, "eval": 43, "overal": 43, "pipeline_config_id": 43, "entri": 43, "hpo_runner_config": 43, "read": 43, "multipl": 43, "datafil": 43, "moment": 43, "data_spec": 43, "data_format": 43, "exclud": 43, "truncation_sid": 43, "block": 43, "conttim": 43, "num_lay": 43, "num_head": 43, "thinning_param": 43, "form": 43, "rmtpp_train": 43, "correct": 43, "subfold": 43, "nhp_train_output": 43, "num_event_types_pad": 43, "event_pad_index": 43, "exp_id": 43, "log_fold": 43, "98888_4299965824_221205": 43, "153425": 43, "saved_model_dir": 43, "saved_log_dir": 43, "rmtpp_train_output": 43, "001": 43, "seq_pad_end": 43, "is_train": 43, "mean": 43}, "objects": {"": [[34, 0, 0, "-", "config_factory"], [38, 0, 0, "-", "runner"], [40, 0, 0, "-", "tf_wrapper"], [40, 0, 0, "-", "torch_wrapper"]], "config_factory": [[34, 1, 1, "", "BaseConfig"], [34, 1, 1, "", "Config"], [34, 1, 1, "", "DataConfig"], [34, 1, 1, "", "DataSpecConfig"], [34, 1, 1, "", "HPOConfig"], [34, 1, 1, "", "HPORunnerConfig"], [34, 1, 1, "", "ModelConfig"], [34, 1, 1, "", "RunnerConfig"]], "config_factory.BaseConfig": [[34, 2, 1, "", "__init__"], [34, 2, 1, "", "copy"], [34, 2, 1, "", "get_yaml_config"], [34, 2, 1, "", "parse_from_yaml_config"], [34, 2, 1, "", "set_backend"]], "config_factory.Config": [[34, 2, 1, "", "build_from_yaml_file"], [34, 2, 1, "", "copy"], [34, 2, 1, "", "get"], [34, 2, 1, "", "get_yaml_config"], [34, 2, 1, "", "parse_from_yaml_config"], [34, 2, 1, "", "pop"], [34, 2, 1, "", "save_to_yaml_file"], [34, 2, 1, "", "set"], [34, 2, 1, "", "update"]], "config_factory.DataConfig": [[34, 2, 1, "", "__init__"], [34, 2, 1, "", "copy"], [34, 2, 1, "", "get_data_dir"], [34, 2, 1, "", "get_yaml_config"], [34, 2, 1, "", "parse_from_yaml_config"]], "config_factory.DataSpecConfig": [[34, 2, 1, "", "__init__"], [34, 2, 1, "", "copy"], [34, 2, 1, "", "get_yaml_config"], [34, 2, 1, "", "parse_from_yaml_config"]], "config_factory.HPOConfig": [[34, 2, 1, "", "__init__"], [34, 2, 1, "", "copy"], [34, 2, 1, "", "get_yaml_config"], [34, 2, 1, "", "parse_from_yaml_config"], [34, 3, 1, "", "storage_path"], [34, 3, 1, "", "storage_protocol"]], "config_factory.HPORunnerConfig": [[34, 2, 1, "", "__init__"], [34, 2, 1, "", "copy"], [34, 2, 1, "", "parse_from_yaml_config"]], "config_factory.ModelConfig": [[34, 2, 1, "", "__init__"], [34, 2, 1, "", "copy"], [34, 2, 1, "", "get_yaml_config"], [34, 2, 1, "", "parse_from_yaml_config"]], "config_factory.RunnerConfig": [[34, 2, 1, "", "__init__"], [34, 2, 1, "", "copy"], [34, 2, 1, "", "ensure_valid_config"], [34, 2, 1, "", "get_metric_direction"], [34, 2, 1, "", "get_metric_functions"], [34, 2, 1, "", "get_yaml_config"], [34, 2, 1, "", "parse_from_yaml_config"], [34, 2, 1, "", "update_config"]], "easy_tpp.model": [[36, 0, 0, "-", "tf_model"], [36, 0, 0, "-", "torch_model"]], "easy_tpp.model.tf_model": [[5, 0, 0, "-", "tf_attnhp"], [6, 0, 0, "-", "tf_baselayer"], [7, 0, 0, "-", "tf_basemodel"], [8, 0, 0, "-", "tf_nhp"], [9, 0, 0, "-", "tf_thinning"]], "easy_tpp.model.tf_model.tf_attnhp": [[5, 1, 1, "", "AttNHP"]], "easy_tpp.model.tf_model.tf_attnhp.AttNHP": [[5, 2, 1, "", "build_graph"], [5, 2, 1, "", "compute_intensities_at_sample_times"], [5, 2, 1, "", "compute_states_at_sample_times"], [5, 2, 1, "", "compute_temporal_embedding"], [5, 2, 1, "", "forward"], [5, 2, 1, "", "forward_pass"], [5, 2, 1, "", "make_combined_att_mask"], [5, 2, 1, "", "make_div_term"], [5, 2, 1, "", "make_layer_mask"], [5, 2, 1, "", "seq_encoding"]], "easy_tpp.model.tf_model.tf_baselayer": [[6, 1, 1, "", "DNN"], [6, 1, 1, "", "DenseDropoutLayernorm"], [6, 1, 1, "", "EncoderLayer"], [6, 1, 1, "", "LayerNormalization"], [6, 1, 1, "", "MultiHeadAttention"], [6, 1, 1, "", "TimePositionalEncoding"], [6, 1, 1, "", "TimeShiftedPositionalEncoding"], [6, 4, 1, "", "append_tensor_alias"], [6, 4, 1, "", "gelu"]], "easy_tpp.model.tf_model.tf_baselayer.DNN": [[6, 2, 1, "", "call"]], "easy_tpp.model.tf_model.tf_baselayer.DenseDropoutLayernorm": [[6, 2, 1, "", "call"]], "easy_tpp.model.tf_model.tf_baselayer.EncoderLayer": [[6, 2, 1, "", "call"]], "easy_tpp.model.tf_model.tf_baselayer.LayerNormalization": [[6, 2, 1, "", "build"], [6, 2, 1, "", "call"]], "easy_tpp.model.tf_model.tf_baselayer.MultiHeadAttention": [[6, 2, 1, "", "build"], [6, 2, 1, "", "call"]], "easy_tpp.model.tf_model.tf_baselayer.TimePositionalEncoding": [[6, 2, 1, "", "__init__"], [6, 2, 1, "", "call"]], "easy_tpp.model.tf_model.tf_baselayer.TimeShiftedPositionalEncoding": [[6, 2, 1, "", "__init__"], [6, 2, 1, "", "call"]], "easy_tpp.model.tf_model.tf_basemodel": [[7, 1, 1, "", "TfBaseModel"]], "easy_tpp.model.tf_model.tf_basemodel.TfBaseModel": [[7, 2, 1, "", "build_input_graph"], [7, 2, 1, "", "compute_loglikelihood"], [7, 2, 1, "", "generate_model_from_config"], [7, 2, 1, "", "make_dtime_loss_samples"], [7, 2, 1, "", "predict_multi_step_since_last_event"], [7, 2, 1, "", "predict_one_step_at_every_event"]], "easy_tpp.model.tf_model.tf_nhp": [[8, 1, 1, "", "ContTimeLSTMCell"], [8, 1, 1, "", "NHP"]], "easy_tpp.model.tf_model.tf_nhp.ContTimeLSTMCell": [[8, 2, 1, "", "__init__"], [8, 2, 1, "", "call"], [8, 2, 1, "", "decay"], [8, 2, 1, "", "dynamic_run"], [8, 2, 1, "", "init_dense_layer"], [8, 2, 1, "", "init_state"]], "easy_tpp.model.tf_model.tf_nhp.NHP": [[8, 2, 1, "", "__init__"], [8, 2, 1, "", "build_graph"], [8, 2, 1, "", "compute_intensities_at_sample_times"], [8, 2, 1, "", "compute_states_at_sampled_times"], [8, 2, 1, "", "forward"], [8, 2, 1, "", "loglike_loss"]], "easy_tpp.model.tf_model.tf_thinning": [[9, 1, 1, "", "EventSampler"]], "easy_tpp.model.tf_model.tf_thinning.EventSampler": [[9, 2, 1, "", "compute_intensity_upper_bound"], [9, 2, 1, "", "sample_accept"], [9, 2, 1, "", "sample_exp_distribution"], [9, 2, 1, "", "sample_uniform_distribution"]], "easy_tpp.model.torch_model": [[10, 0, 0, "-", "torch_attnhp"], [11, 0, 0, "-", "torch_baselayer"], [12, 0, 0, "-", "torch_basemodel"], [13, 0, 0, "-", "torch_nhp"], [14, 0, 0, "-", "torch_thinning"]], "easy_tpp.model.torch_model.torch_attnhp": [[10, 1, 1, "", "AttNHP"]], "easy_tpp.model.torch_model.torch_attnhp.AttNHP": [[10, 2, 1, "", "__init__"], [10, 2, 1, "", "compute_intensities_at_sample_times"], [10, 2, 1, "", "compute_states_at_sample_times"], [10, 2, 1, "", "compute_temporal_embedding"], [10, 2, 1, "", "forward"], [10, 2, 1, "", "forward_pass"], [10, 2, 1, "", "loglike_loss"], [10, 2, 1, "", "make_combined_att_mask"], [10, 2, 1, "", "make_layer_mask"], [10, 2, 1, "", "seq_encoding"]], "easy_tpp.model.torch_model.torch_baselayer": [[11, 1, 1, "", "DNN"], [11, 1, 1, "", "EncoderLayer"], [11, 1, 1, "", "GELU"], [11, 1, 1, "", "Identity"], [11, 1, 1, "", "MultiHeadAttention"], [11, 1, 1, "", "SublayerConnection"], [11, 1, 1, "", "TimePositionalEncoding"], [11, 1, 1, "", "TimeShiftedPositionalEncoding"], [11, 4, 1, "", "activation_layer"]], "easy_tpp.model.torch_model.torch_baselayer.DNN": [[11, 2, 1, "", "__init__"], [11, 2, 1, "", "forward"]], "easy_tpp.model.torch_model.torch_baselayer.EncoderLayer": [[11, 2, 1, "", "__init__"], [11, 2, 1, "", "forward"]], "easy_tpp.model.torch_model.torch_baselayer.GELU": [[11, 2, 1, "", "forward"]], "easy_tpp.model.torch_model.torch_baselayer.Identity": [[11, 2, 1, "", "forward"]], "easy_tpp.model.torch_model.torch_baselayer.MultiHeadAttention": [[11, 2, 1, "", "__init__"], [11, 2, 1, "", "forward"]], "easy_tpp.model.torch_model.torch_baselayer.SublayerConnection": [[11, 2, 1, "", "__init__"], [11, 2, 1, "", "forward"]], "easy_tpp.model.torch_model.torch_baselayer.TimePositionalEncoding": [[11, 2, 1, "", "__init__"], [11, 2, 1, "", "forward"]], "easy_tpp.model.torch_model.torch_baselayer.TimeShiftedPositionalEncoding": [[11, 2, 1, "", "__init__"], [11, 2, 1, "", "forward"]], "easy_tpp.model.torch_model.torch_basemodel": [[12, 1, 1, "", "TorchBaseModel"]], "easy_tpp.model.torch_model.torch_basemodel.TorchBaseModel": [[12, 2, 1, "", "__init__"], [12, 2, 1, "", "compute_loglikelihood"], [12, 2, 1, "", "generate_model_from_config"], [12, 2, 1, "", "get_logits_at_last_step"], [12, 2, 1, "", "make_dtime_loss_samples"], [12, 2, 1, "", "predict_multi_step_since_last_event"], [12, 2, 1, "", "predict_one_step_at_every_event"]], "easy_tpp.model.torch_model.torch_nhp": [[13, 1, 1, "", "ContTimeLSTMCell"], [13, 1, 1, "", "NHP"]], "easy_tpp.model.torch_model.torch_nhp.ContTimeLSTMCell": [[13, 2, 1, "", "__init__"], [13, 2, 1, "", "decay"], [13, 2, 1, "", "forward"], [13, 2, 1, "", "init_dense_layer"]], "easy_tpp.model.torch_model.torch_nhp.NHP": [[13, 2, 1, "", "__init__"], [13, 2, 1, "", "compute_intensities_at_sample_times"], [13, 2, 1, "", "compute_states_at_sample_times"], [13, 2, 1, "", "forward"], [13, 2, 1, "", "init_state"], [13, 2, 1, "", "loglike_loss"]], "easy_tpp.model.torch_model.torch_thinning": [[14, 1, 1, "", "EventSampler"]], "easy_tpp.model.torch_model.torch_thinning.EventSampler": [[14, 2, 1, "", "__init__"], [14, 2, 1, "", "compute_intensity_upper_bound"], [14, 2, 1, "", "draw_next_time_one_step"], [14, 2, 1, "", "sample_accept"], [14, 2, 1, "", "sample_exp_distribution"], [14, 2, 1, "", "sample_uniform_distribution"]], "easy_tpp": [[37, 0, 0, "-", "preprocess"], [39, 0, 0, "-", "utils"]], "easy_tpp.preprocess": [[37, 1, 1, "", "EventTokenizer"], [37, 1, 1, "", "TPPDataset"], [15, 0, 0, "-", "data_collator"], [16, 0, 0, "-", "data_loader"], [17, 0, 0, "-", "dataset"], [18, 0, 0, "-", "event_tokenizer"]], "easy_tpp.preprocess.EventTokenizer": [[37, 2, 1, "", "__init__"], [37, 2, 1, "", "make_attn_mask_for_pad_sequence"], [37, 2, 1, "", "make_pad_sequence"], [37, 2, 1, "", "make_type_mask_for_pad_sequence"], [37, 2, 1, "", "pad"]], "easy_tpp.preprocess.TPPDataset": [[37, 2, 1, "", "__init__"], [37, 2, 1, "", "to_tf_dataset"]], "easy_tpp.preprocess.data_collator": [[15, 1, 1, "", "TPPDataCollator"]], "easy_tpp.preprocess.data_collator.TPPDataCollator": [[15, 2, 1, "", "__init__"]], "easy_tpp.preprocess.dataset": [[17, 1, 1, "", "TPPDataset"]], "easy_tpp.preprocess.dataset.TPPDataset": [[17, 2, 1, "", "__init__"], [17, 2, 1, "", "to_tf_dataset"]], "easy_tpp.preprocess.event_tokenizer": [[18, 1, 1, "", "BatchEncoding"], [18, 1, 1, "", "EventTokenizer"]], "easy_tpp.preprocess.event_tokenizer.BatchEncoding": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "convert_to_tensors"], [18, 2, 1, "", "items"], [18, 2, 1, "", "keys"], [18, 2, 1, "", "to"], [18, 2, 1, "", "values"]], "easy_tpp.preprocess.event_tokenizer.EventTokenizer": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "make_attn_mask_for_pad_sequence"], [18, 2, 1, "", "make_pad_sequence"], [18, 2, 1, "", "make_type_mask_for_pad_sequence"], [18, 2, 1, "", "pad"]], "easy_tpp.utils": [[39, 1, 1, "", "ExplicitEnum"], [39, 1, 1, "", "LogConst"], [39, 1, 1, "", "MetricsTracker"], [39, 1, 1, "", "PaddingStrategy"], [39, 1, 1, "", "Registrable"], [39, 1, 1, "", "RunnerPhase"], [39, 1, 1, "", "Timer"], [39, 1, 1, "", "TruncationStrategy"], [39, 4, 1, "", "array_pad_cols"], [39, 4, 1, "", "concat_element"], [19, 0, 0, "-", "const"], [39, 4, 1, "", "count_model_params"], [39, 4, 1, "", "create_folder"], [39, 4, 1, "", "dict_deep_update"], [20, 0, 0, "-", "generic"], [39, 4, 1, "", "has_key"], [21, 0, 0, "-", "import_utils"], [39, 4, 1, "", "is_local_master_process"], [39, 4, 1, "", "is_master_process"], [39, 4, 1, "", "is_numpy_array"], [39, 4, 1, "", "is_torch_device"], [39, 4, 1, "", "load_pickle"], [39, 4, 1, "", "load_yaml_config"], [22, 0, 0, "-", "log_utils"], [39, 4, 1, "", "make_config_string"], [23, 0, 0, "-", "metrics"], [24, 0, 0, "-", "misc"], [25, 0, 0, "-", "multiprocess_utils"], [26, 0, 0, "-", "ode_utils"], [39, 4, 1, "", "parse_uri_to_protocol_and_path"], [39, 4, 1, "", "py_assert"], [27, 0, 0, "-", "registrable"], [39, 4, 1, "", "rk4_step_method"], [39, 4, 1, "", "save_pickle"], [39, 4, 1, "", "save_yaml_config"], [39, 4, 1, "", "set_device"], [39, 4, 1, "", "set_optimizer"], [39, 4, 1, "", "set_seed"], [28, 0, 0, "-", "tf_utils"], [29, 0, 0, "-", "torch_utils"]], "easy_tpp.utils.MetricsTracker": [[39, 2, 1, "", "__init__"], [39, 2, 1, "", "update_best"]], "easy_tpp.utils.Registrable": [[39, 2, 1, "", "by_name"], [39, 2, 1, "", "list_available"], [39, 2, 1, "", "register"], [39, 2, 1, "", "resolve_class_name"]], "easy_tpp.utils.Timer": [[39, 2, 1, "", "__init__"]], "easy_tpp.utils.const": [[19, 1, 1, "", "Backend"], [19, 1, 1, "", "ExplicitEnum"], [19, 1, 1, "", "LogConst"], [19, 1, 1, "", "LossFunction"], [19, 1, 1, "", "PaddingStrategy"], [19, 1, 1, "", "PredOutputIndex"], [19, 1, 1, "", "RunnerPhase"], [19, 1, 1, "", "TensorType"], [19, 1, 1, "", "TruncationStrategy"]], "easy_tpp.utils.generic": [[20, 4, 1, "", "is_numpy_array"], [20, 4, 1, "", "is_tensor"], [20, 4, 1, "", "is_tf_symbolic_tensor"], [20, 4, 1, "", "is_tf_tensor"], [20, 4, 1, "", "is_torch_device"], [20, 4, 1, "", "is_torch_dtype"], [20, 4, 1, "", "is_torch_tensor"]], "easy_tpp.utils.log_utils": [[22, 1, 1, "", "CustomFormatter"]], "easy_tpp.utils.log_utils.CustomFormatter": [[22, 2, 1, "", "format"]], "easy_tpp.utils.metrics": [[23, 1, 1, "", "MetricsTracker"]], "easy_tpp.utils.metrics.MetricsTracker": [[23, 2, 1, "", "__init__"], [23, 2, 1, "", "update_best"]], "easy_tpp.utils.misc": [[24, 4, 1, "", "array_pad_cols"], [24, 4, 1, "", "concat_element"], [24, 4, 1, "", "create_folder"], [24, 4, 1, "", "dict_deep_update"], [24, 4, 1, "", "has_key"], [24, 4, 1, "", "load_pickle"], [24, 4, 1, "", "load_yaml_config"], [24, 4, 1, "", "make_config_string"], [24, 4, 1, "", "py_assert"], [24, 4, 1, "", "save_pickle"], [24, 4, 1, "", "save_yaml_config"]], "easy_tpp.utils.multiprocess_utils": [[25, 1, 1, "", "Timer"], [25, 4, 1, "", "get_now_timestamp_id"], [25, 4, 1, "", "get_unique_id"], [25, 4, 1, "", "is_local_master_process"], [25, 4, 1, "", "is_master_process"], [25, 4, 1, "", "parse_uri_to_protocol_and_path"]], "easy_tpp.utils.multiprocess_utils.Timer": [[25, 2, 1, "", "__init__"]], "easy_tpp.utils.ode_utils": [[26, 4, 1, "", "euler_step_method"], [26, 4, 1, "", "ode_update_op"], [26, 4, 1, "", "rk2_step_method"], [26, 4, 1, "", "rk4_step_method"]], "easy_tpp.utils.registrable": [[27, 1, 1, "", "Registrable"]], "easy_tpp.utils.registrable.Registrable": [[27, 2, 1, "", "by_name"], [27, 2, 1, "", "list_available"], [27, 2, 1, "", "register"], [27, 2, 1, "", "resolve_class_name"]], "easy_tpp.utils.tf_utils": [[28, 4, 1, "", "count_model_params"], [28, 4, 1, "", "create_tensor"], [28, 4, 1, "", "get_shape_list"], [28, 4, 1, "", "set_device"], [28, 4, 1, "", "set_optimizer"], [28, 4, 1, "", "set_seed"], [28, 4, 1, "", "swap_axes"], [28, 4, 1, "", "tensordot"]], "easy_tpp.utils.torch_utils": [[29, 4, 1, "", "count_model_params"], [29, 4, 1, "", "set_device"], [29, 4, 1, "", "set_optimizer"], [29, 4, 1, "", "set_seed"]], "runner": [[38, 1, 1, "", "Runner"], [38, 1, 1, "", "TPPRunner"]], "runner.Runner": [[38, 2, 1, "", "__init__"], [38, 2, 1, "", "build_from_config"], [38, 2, 1, "", "evaluate"], [38, 2, 1, "", "gen"], [38, 2, 1, "", "get_config"], [38, 2, 1, "", "get_model_dir"], [38, 2, 1, "", "run"], [38, 2, 1, "", "save"], [38, 2, 1, "", "save_log"], [38, 2, 1, "", "set_model_dir"], [38, 2, 1, "", "train"]], "runner.TPPRunner": [[38, 2, 1, "", "__init__"], [38, 2, 1, "", "run_one_epoch"]], "tf_wrapper": [[40, 1, 1, "", "TfModelWrapper"]], "tf_wrapper.TfModelWrapper": [[40, 2, 1, "", "__init__"], [40, 2, 1, "", "close_summary"], [40, 2, 1, "", "restore"], [40, 2, 1, "", "run_batch"], [40, 2, 1, "", "save"], [40, 2, 1, "", "write_summary"]], "torch_wrapper": [[40, 1, 1, "", "TorchModelWrapper"]], "torch_wrapper.TorchModelWrapper": [[40, 2, 1, "", "__init__"], [40, 2, 1, "", "close_summary"], [40, 2, 1, "", "restore"], [40, 2, 1, "", "run_batch"], [40, 2, 1, "", "save"], [40, 2, 1, "", "write_summary"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"]}, "titleterms": {"model": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 31, 32, 36, 38, 42, 43], "implement": [0, 3], "detail": 0, "basic": 0, "structur": 0, "comput": 0, "loglikelihood": 0, "non": 0, "pad": [0, 41], "event": [0, 3], "sequenc": [0, 3, 41], "integr": 0, "insid": 0, "neural": 0, "hawk": 0, "process": [0, 41], "nhp": 0, "attent": 0, "attnhp": 0, "transform": 0, "thp": 0, "self": 0, "sahp": 0, "recurr": 0, "mark": 0, "tempor": 0, "point": 0, "rmtpp": 0, "intens": 0, "free": 0, "learn": 0, "intensityfre": 0, "fulli": 0, "network": 0, "base": 0, "gener": [0, 20], "fullynn": 0, "od": 0, "odetpp": 0, "anhn": 0, "perform": 1, "valid": 1, "easytpp": [1, 33, 34, 35, 36, 37, 38, 39, 40], "simul": 1, "dataset": [1, 17, 32, 41], "conttim": 1, "launch": 2, "tensorboard": 2, "step": [2, 3, 42, 43], "1": [2, 42, 43], "activ": 2, "usag": 2, "config": [2, 34, 35, 42, 43], "file": [2, 32, 42, 43], "2": [2, 42, 43], "thin": 3, "algorithm": 3, "sampl": 3, "The": 3, "One": 3, "predict": [3, 31], "multi": 3, "custom": 4, "creat": 4, "new": 4, "tpp": 4, "class": 4, "rewrit": 4, "relev": 4, "method": 4, "easy_tpp": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], "tf_model": [5, 6, 7, 8, 9, 36], "tf_attnhp": 5, "tf_baselay": 6, "tf_basemodel": 7, "tf_nhp": 8, "tf_thin": 9, "torch_model": [10, 11, 12, 13, 14, 36], "torch_attnhp": 10, "torch_baselay": 11, "torch_basemodel": 12, "torch_nhp": 13, "torch_thin": 14, "preprocess": [15, 16, 17, 18, 37], "data_col": 15, "data_load": 16, "event_token": 18, "util": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 39], "const": 19, "import_util": 21, "log_util": 22, "metric": 23, "misc": 24, "multiprocess_util": 25, "ode_util": 26, "registr": 27, "tf_util": 28, "torch_util": 29, "instal": [30, 31], "requir": [30, 41], "pip": 30, "sourc": 30, "introduct": 31, "framework": 31, "prepar": 31, "data": [31, 41, 42, 43], "train": [31, 32, 43], "quick": 32, "start": [32, 33], "download": 32, "setup": [32, 42, 43], "configur": [32, 43], "refer": [32, 33], "document": 33, "get": 33, "user": 33, "guid": 33, "develop": 33, "advanc": 33, "topic": 33, "api": 33, "modul": [34, 35, 36, 37, 38, 39, 40], "runner": 38, "tf": 40, "torch": 40, "wrapper": 40, "expect": 41, "format": 41, "mask": 41, "an": 41, "exampl": 41, "evalu": 42, "run": [42, 43], "script": [42, 43], "checkout": [42, 43], "output": [42, 43], "explan": 43, "contain": 43}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"Model Implementation Details": [[0, "model-implementation-details"]], "Basic structure": [[0, "basic-structure"]], "Computing the loglikelihood of non-pad event sequence": [[0, "computing-the-loglikelihood-of-non-pad-event-sequence"]], "Computing the integral inside the loglikelihood": [[0, "computing-the-integral-inside-the-loglikelihood"]], "Neural Hawkes Process (NHP)": [[0, "neural-hawkes-process-nhp"]], "Attentive Neural Hawkes Process (AttNHP)": [[0, "attentive-neural-hawkes-process-attnhp"]], "Transformer Hawkes Process (THP)": [[0, "transformer-hawkes-process-thp"]], "Self-Attentive Hawkes Process (SAHP)": [[0, "self-attentive-hawkes-process-sahp"]], "Recurrent Marked Temporal Point Processes (RMTPP)": [[0, "recurrent-marked-temporal-point-processes-rmtpp"]], "Intensity Free Learning of Temporal Point Process (IntensityFree)": [[0, "intensity-free-learning-of-temporal-point-process-intensityfree"]], "Fully Neural Network based Model for General Temporal Point Processes (FullyNN)": [[0, "fully-neural-network-based-model-for-general-temporal-point-processes-fullynn"]], "ODE-based Temporal Point Process (ODETPP)": [[0, "ode-based-temporal-point-process-odetpp"]], "Attentive Neural Hawkes Network (ANHN)": [[0, "attentive-neural-hawkes-network-anhn"]], "Performance validation of EasyTPP models": [[1, "performance-validation-of-easytpp-models"]], "Simulated dataset": [[1, "simulated-dataset"]], "Conttime": [[1, "conttime"]], "Launching the Tensorboard": [[2, "launching-the-tensorboard"]], "Step 1: Activate the usage of tensorboard in Config file": [[2, "step-1-activate-the-usage-of-tensorboard-in-config-file"]], "Step 2: Launching the tensorboard": [[2, "step-2-launching-the-tensorboard"]], "Thinning Algorithm for Sampling Event Sequence": [[3, "thinning-algorithm-for-sampling-event-sequence"]], "The implementation of the algorithm": [[3, "the-implementation-of-the-algorithm"]], "One-step prediction": [[3, "one-step-prediction"]], "Multi-step prediction": [[3, "multi-step-prediction"]], "Customize a Model": [[4, "customize-a-model"]], "Create a new TPP Model Class": [[4, "create-a-new-tpp-model-class"]], "Rewrite Relevant Methods": [[4, "rewrite-relevant-methods"]], "easy_tpp.model.tf_model.tf_attnhp": [[5, "module-easy_tpp.model.tf_model.tf_attnhp"]], "easy_tpp.model.tf_model.tf_baselayer": [[6, "module-easy_tpp.model.tf_model.tf_baselayer"]], "easy_tpp.model.tf_model.tf_basemodel": [[7, "module-easy_tpp.model.tf_model.tf_basemodel"]], "easy_tpp.model.tf_model.tf_nhp": [[8, "module-easy_tpp.model.tf_model.tf_nhp"]], "easy_tpp.model.tf_model.tf_thinning": [[9, "module-easy_tpp.model.tf_model.tf_thinning"]], "easy_tpp.model.torch_model.torch_attnhp": [[10, "module-easy_tpp.model.torch_model.torch_attnhp"]], "easy_tpp.model.torch_model.torch_baselayer": [[11, "module-easy_tpp.model.torch_model.torch_baselayer"]], "easy_tpp.model.torch_model.torch_basemodel": [[12, "module-easy_tpp.model.torch_model.torch_basemodel"]], "easy_tpp.model.torch_model.torch_nhp": [[13, "module-easy_tpp.model.torch_model.torch_nhp"]], "easy_tpp.model.torch_model.torch_thinning": [[14, "module-easy_tpp.model.torch_model.torch_thinning"]], "easy_tpp.preprocess.data_collator": [[15, "module-easy_tpp.preprocess.data_collator"]], "easy_tpp.preprocess.data_loader": [[16, "module-easy_tpp.preprocess.data_loader"]], "easy_tpp.preprocess.dataset": [[17, "module-easy_tpp.preprocess.dataset"]], "easy_tpp.preprocess.event_tokenizer": [[18, "module-easy_tpp.preprocess.event_tokenizer"]], "easy_tpp.utils.const": [[19, "module-easy_tpp.utils.const"]], "easy_tpp.utils.generic": [[20, "module-easy_tpp.utils.generic"]], "easy_tpp.utils.import_utils": [[21, "module-easy_tpp.utils.import_utils"]], "easy_tpp.utils.log_utils": [[22, "module-easy_tpp.utils.log_utils"]], "easy_tpp.utils.metrics": [[23, "module-easy_tpp.utils.metrics"]], "easy_tpp.utils.misc": [[24, "module-easy_tpp.utils.misc"]], "easy_tpp.utils.multiprocess_utils": [[25, "module-easy_tpp.utils.multiprocess_utils"]], "easy_tpp.utils.ode_utils": [[26, "module-easy_tpp.utils.ode_utils"]], "easy_tpp.utils.registrable": [[27, "module-easy_tpp.utils.registrable"]], "easy_tpp.utils.tf_utils": [[28, "module-easy_tpp.utils.tf_utils"]], "easy_tpp.utils.torch_utils": [[29, "module-easy_tpp.utils.torch_utils"]], "Installation": [[30, "installation"]], "Requirements": [[30, "requirements"]], "Install": [[30, "install"], [31, "install"]], "Install with pip": [[30, "install-with-pip"]], "Install with the source": [[30, "install-with-the-source"]], "Introduction": [[31, "introduction"]], "Framework": [[31, "framework"]], "Prepare Data": [[31, "prepare-data"]], "Model Training and Prediction": [[31, "model-training-and-prediction"]], "Quick Start": [[32, "quick-start"]], "Download Dataset": [[32, "download-dataset"]], "Setup the configuration file": [[32, "setup-the-configuration-file"]], "Train the Model": [[32, "train-the-model"]], "Reference": [[32, "reference"]], "EasyTPP Documentation": [[33, "easytpp-documentation"]], "GETTING STARTED": [[33, null]], "USER GUIDE": [[33, null]], "DEVELOPER GUIDE": [[33, null]], "ADVANCED TOPICS": [[33, null]], "API REFERENCE": [[33, null]], "EasyTPP Config Modules": [[34, "module-config_factory"], [35, "easytpp-config-modules"]], "EasyTPP Models": [[36, "easytpp-models"]], "model.tf_model module": [[36, "module-easy_tpp.model.tf_model"]], "model.torch_model module": [[36, "module-easy_tpp.model.torch_model"]], "EasyTPP Preprocess Modules": [[37, "module-easy_tpp.preprocess"]], "EasyTPP Model Runner Modules": [[38, "module-runner"]], "EasyTPP Utilities Modules": [[39, "module-easy_tpp.utils"]], "EasyTPP Tf and Torch Wrapper Modules": [[40, "module-tf_wrapper"]], "Expected Dataset Format and Data Processing": [[41, "expected-dataset-format-and-data-processing"]], "Required format": [[41, "required-format"]], "Data processing": [[41, "data-processing"]], "Sequence padding": [[41, "sequence-padding"]], "Sequence masking": [[41, "sequence-masking"]], "An example": [[41, "an-example"]], "Evaluate a Model": [[42, "evaluate-a-model"]], "Step 1: Setup the data and model config files": [[42, "step-1-setup-the-data-and-model-config-files"]], "Step 2: Run the evaluation script": [[42, "step-2-run-the-evaluation-script"]], "Checkout the output": [[42, "checkout-the-output"], [43, "checkout-the-output"]], "Training a Model & Configuration Explanation": [[43, "training-a-model-configuration-explanation"]], "Step 1: Setup the config file containing data and model configs": [[43, "step-1-setup-the-config-file-containing-data-and-model-configs"]], "Step 2: Run the training script": [[43, "step-2-run-the-training-script"]]}, "indexentries": {"attnhp (class in easy_tpp.model.tf_model.tf_attnhp)": [[5, "easy_tpp.model.tf_model.tf_attnhp.AttNHP"]], "build_graph() (easy_tpp.model.tf_model.tf_attnhp.attnhp method)": [[5, "easy_tpp.model.tf_model.tf_attnhp.AttNHP.build_graph"]], "compute_intensities_at_sample_times() (easy_tpp.model.tf_model.tf_attnhp.attnhp method)": [[5, "easy_tpp.model.tf_model.tf_attnhp.AttNHP.compute_intensities_at_sample_times"]], "compute_states_at_sample_times() (easy_tpp.model.tf_model.tf_attnhp.attnhp method)": [[5, "easy_tpp.model.tf_model.tf_attnhp.AttNHP.compute_states_at_sample_times"]], "compute_temporal_embedding() (easy_tpp.model.tf_model.tf_attnhp.attnhp method)": [[5, "easy_tpp.model.tf_model.tf_attnhp.AttNHP.compute_temporal_embedding"]], "easy_tpp.model.tf_model.tf_attnhp": [[5, "module-easy_tpp.model.tf_model.tf_attnhp"]], "forward() (easy_tpp.model.tf_model.tf_attnhp.attnhp method)": [[5, "easy_tpp.model.tf_model.tf_attnhp.AttNHP.forward"]], "forward_pass() (easy_tpp.model.tf_model.tf_attnhp.attnhp method)": [[5, "easy_tpp.model.tf_model.tf_attnhp.AttNHP.forward_pass"]], "make_combined_att_mask() (easy_tpp.model.tf_model.tf_attnhp.attnhp method)": [[5, "easy_tpp.model.tf_model.tf_attnhp.AttNHP.make_combined_att_mask"]], "make_div_term() (easy_tpp.model.tf_model.tf_attnhp.attnhp method)": [[5, "easy_tpp.model.tf_model.tf_attnhp.AttNHP.make_div_term"]], "make_layer_mask() (easy_tpp.model.tf_model.tf_attnhp.attnhp method)": [[5, "easy_tpp.model.tf_model.tf_attnhp.AttNHP.make_layer_mask"]], "module": [[5, "module-easy_tpp.model.tf_model.tf_attnhp"], [6, "module-easy_tpp.model.tf_model.tf_baselayer"], [7, "module-easy_tpp.model.tf_model.tf_basemodel"], [8, "module-easy_tpp.model.tf_model.tf_nhp"], [9, "module-easy_tpp.model.tf_model.tf_thinning"], [10, "module-easy_tpp.model.torch_model.torch_attnhp"], [11, "module-easy_tpp.model.torch_model.torch_baselayer"], [12, "module-easy_tpp.model.torch_model.torch_basemodel"], [13, "module-easy_tpp.model.torch_model.torch_nhp"], [14, "module-easy_tpp.model.torch_model.torch_thinning"], [15, "module-easy_tpp.preprocess.data_collator"], [16, "module-easy_tpp.preprocess.data_loader"], [17, "module-easy_tpp.preprocess.dataset"], [18, "module-easy_tpp.preprocess.event_tokenizer"], [19, "module-easy_tpp.utils.const"], [20, "module-easy_tpp.utils.generic"], [21, "module-easy_tpp.utils.import_utils"], [22, "module-easy_tpp.utils.log_utils"], [23, "module-easy_tpp.utils.metrics"], [24, "module-easy_tpp.utils.misc"], [25, "module-easy_tpp.utils.multiprocess_utils"], [26, "module-easy_tpp.utils.ode_utils"], [27, "module-easy_tpp.utils.registrable"], [28, "module-easy_tpp.utils.tf_utils"], [29, "module-easy_tpp.utils.torch_utils"], [34, "module-config_factory"], [36, "module-easy_tpp.model.tf_model"], [36, "module-easy_tpp.model.torch_model"], [37, "module-easy_tpp.preprocess"], [38, "module-runner"], [39, "module-easy_tpp.utils"], [40, "module-tf_wrapper"], [40, "module-torch_wrapper"]], "seq_encoding() (easy_tpp.model.tf_model.tf_attnhp.attnhp method)": [[5, "easy_tpp.model.tf_model.tf_attnhp.AttNHP.seq_encoding"]], "dnn (class in easy_tpp.model.tf_model.tf_baselayer)": [[6, "easy_tpp.model.tf_model.tf_baselayer.DNN"]], "densedropoutlayernorm (class in easy_tpp.model.tf_model.tf_baselayer)": [[6, "easy_tpp.model.tf_model.tf_baselayer.DenseDropoutLayernorm"]], "encoderlayer (class in easy_tpp.model.tf_model.tf_baselayer)": [[6, "easy_tpp.model.tf_model.tf_baselayer.EncoderLayer"]], "layernormalization (class in easy_tpp.model.tf_model.tf_baselayer)": [[6, "easy_tpp.model.tf_model.tf_baselayer.LayerNormalization"]], "multiheadattention (class in easy_tpp.model.tf_model.tf_baselayer)": [[6, "easy_tpp.model.tf_model.tf_baselayer.MultiHeadAttention"]], "timepositionalencoding (class in easy_tpp.model.tf_model.tf_baselayer)": [[6, "easy_tpp.model.tf_model.tf_baselayer.TimePositionalEncoding"]], "timeshiftedpositionalencoding (class in easy_tpp.model.tf_model.tf_baselayer)": [[6, "easy_tpp.model.tf_model.tf_baselayer.TimeShiftedPositionalEncoding"]], "__init__() (easy_tpp.model.tf_model.tf_baselayer.timepositionalencoding method)": [[6, "easy_tpp.model.tf_model.tf_baselayer.TimePositionalEncoding.__init__"]], "__init__() (easy_tpp.model.tf_model.tf_baselayer.timeshiftedpositionalencoding method)": [[6, "easy_tpp.model.tf_model.tf_baselayer.TimeShiftedPositionalEncoding.__init__"]], "append_tensor_alias() (in module easy_tpp.model.tf_model.tf_baselayer)": [[6, "easy_tpp.model.tf_model.tf_baselayer.append_tensor_alias"]], "build() (easy_tpp.model.tf_model.tf_baselayer.layernormalization method)": [[6, "easy_tpp.model.tf_model.tf_baselayer.LayerNormalization.build"]], "build() (easy_tpp.model.tf_model.tf_baselayer.multiheadattention method)": [[6, "easy_tpp.model.tf_model.tf_baselayer.MultiHeadAttention.build"]], "call() (easy_tpp.model.tf_model.tf_baselayer.dnn method)": [[6, "easy_tpp.model.tf_model.tf_baselayer.DNN.call"]], "call() (easy_tpp.model.tf_model.tf_baselayer.densedropoutlayernorm method)": [[6, "easy_tpp.model.tf_model.tf_baselayer.DenseDropoutLayernorm.call"]], "call() (easy_tpp.model.tf_model.tf_baselayer.encoderlayer method)": [[6, "easy_tpp.model.tf_model.tf_baselayer.EncoderLayer.call"]], "call() (easy_tpp.model.tf_model.tf_baselayer.layernormalization method)": [[6, "easy_tpp.model.tf_model.tf_baselayer.LayerNormalization.call"]], "call() (easy_tpp.model.tf_model.tf_baselayer.multiheadattention method)": [[6, "easy_tpp.model.tf_model.tf_baselayer.MultiHeadAttention.call"]], "call() (easy_tpp.model.tf_model.tf_baselayer.timepositionalencoding method)": [[6, "easy_tpp.model.tf_model.tf_baselayer.TimePositionalEncoding.call"]], "call() (easy_tpp.model.tf_model.tf_baselayer.timeshiftedpositionalencoding method)": [[6, "easy_tpp.model.tf_model.tf_baselayer.TimeShiftedPositionalEncoding.call"]], "easy_tpp.model.tf_model.tf_baselayer": [[6, "module-easy_tpp.model.tf_model.tf_baselayer"]], "gelu() (in module easy_tpp.model.tf_model.tf_baselayer)": [[6, "easy_tpp.model.tf_model.tf_baselayer.gelu"]], "tfbasemodel (class in easy_tpp.model.tf_model.tf_basemodel)": [[7, "easy_tpp.model.tf_model.tf_basemodel.TfBaseModel"]], "build_input_graph() (easy_tpp.model.tf_model.tf_basemodel.tfbasemodel method)": [[7, "easy_tpp.model.tf_model.tf_basemodel.TfBaseModel.build_input_graph"]], "compute_loglikelihood() (easy_tpp.model.tf_model.tf_basemodel.tfbasemodel method)": [[7, "easy_tpp.model.tf_model.tf_basemodel.TfBaseModel.compute_loglikelihood"]], "easy_tpp.model.tf_model.tf_basemodel": [[7, "module-easy_tpp.model.tf_model.tf_basemodel"]], "generate_model_from_config() (easy_tpp.model.tf_model.tf_basemodel.tfbasemodel static method)": [[7, "easy_tpp.model.tf_model.tf_basemodel.TfBaseModel.generate_model_from_config"]], "make_dtime_loss_samples() (easy_tpp.model.tf_model.tf_basemodel.tfbasemodel method)": [[7, "easy_tpp.model.tf_model.tf_basemodel.TfBaseModel.make_dtime_loss_samples"]], "predict_multi_step_since_last_event() (easy_tpp.model.tf_model.tf_basemodel.tfbasemodel method)": [[7, "easy_tpp.model.tf_model.tf_basemodel.TfBaseModel.predict_multi_step_since_last_event"]], "predict_one_step_at_every_event() (easy_tpp.model.tf_model.tf_basemodel.tfbasemodel method)": [[7, "easy_tpp.model.tf_model.tf_basemodel.TfBaseModel.predict_one_step_at_every_event"]], "conttimelstmcell (class in easy_tpp.model.tf_model.tf_nhp)": [[8, "easy_tpp.model.tf_model.tf_nhp.ContTimeLSTMCell"]], "nhp (class in easy_tpp.model.tf_model.tf_nhp)": [[8, "easy_tpp.model.tf_model.tf_nhp.NHP"]], "__init__() (easy_tpp.model.tf_model.tf_nhp.conttimelstmcell method)": [[8, "easy_tpp.model.tf_model.tf_nhp.ContTimeLSTMCell.__init__"]], "__init__() (easy_tpp.model.tf_model.tf_nhp.nhp method)": [[8, "easy_tpp.model.tf_model.tf_nhp.NHP.__init__"]], "build_graph() (easy_tpp.model.tf_model.tf_nhp.nhp method)": [[8, "easy_tpp.model.tf_model.tf_nhp.NHP.build_graph"]], "call() (easy_tpp.model.tf_model.tf_nhp.conttimelstmcell method)": [[8, "easy_tpp.model.tf_model.tf_nhp.ContTimeLSTMCell.call"]], "compute_intensities_at_sample_times() (easy_tpp.model.tf_model.tf_nhp.nhp method)": [[8, "easy_tpp.model.tf_model.tf_nhp.NHP.compute_intensities_at_sample_times"]], "compute_states_at_sampled_times() (easy_tpp.model.tf_model.tf_nhp.nhp method)": [[8, "easy_tpp.model.tf_model.tf_nhp.NHP.compute_states_at_sampled_times"]], "decay() (easy_tpp.model.tf_model.tf_nhp.conttimelstmcell static method)": [[8, "easy_tpp.model.tf_model.tf_nhp.ContTimeLSTMCell.decay"]], "dynamic_run() (easy_tpp.model.tf_model.tf_nhp.conttimelstmcell method)": [[8, "easy_tpp.model.tf_model.tf_nhp.ContTimeLSTMCell.dynamic_run"]], "easy_tpp.model.tf_model.tf_nhp": [[8, "module-easy_tpp.model.tf_model.tf_nhp"]], "forward() (easy_tpp.model.tf_model.tf_nhp.nhp method)": [[8, "easy_tpp.model.tf_model.tf_nhp.NHP.forward"]], "init_dense_layer() (easy_tpp.model.tf_model.tf_nhp.conttimelstmcell method)": [[8, "easy_tpp.model.tf_model.tf_nhp.ContTimeLSTMCell.init_dense_layer"]], "init_state() (easy_tpp.model.tf_model.tf_nhp.conttimelstmcell method)": [[8, "easy_tpp.model.tf_model.tf_nhp.ContTimeLSTMCell.init_state"]], "loglike_loss() (easy_tpp.model.tf_model.tf_nhp.nhp method)": [[8, "easy_tpp.model.tf_model.tf_nhp.NHP.loglike_loss"]], "eventsampler (class in easy_tpp.model.tf_model.tf_thinning)": [[9, "easy_tpp.model.tf_model.tf_thinning.EventSampler"]], "compute_intensity_upper_bound() (easy_tpp.model.tf_model.tf_thinning.eventsampler method)": [[9, "easy_tpp.model.tf_model.tf_thinning.EventSampler.compute_intensity_upper_bound"]], "easy_tpp.model.tf_model.tf_thinning": [[9, "module-easy_tpp.model.tf_model.tf_thinning"]], "sample_accept() (easy_tpp.model.tf_model.tf_thinning.eventsampler method)": [[9, "easy_tpp.model.tf_model.tf_thinning.EventSampler.sample_accept"]], "sample_exp_distribution() (easy_tpp.model.tf_model.tf_thinning.eventsampler method)": [[9, "easy_tpp.model.tf_model.tf_thinning.EventSampler.sample_exp_distribution"]], "sample_uniform_distribution() (easy_tpp.model.tf_model.tf_thinning.eventsampler method)": [[9, "easy_tpp.model.tf_model.tf_thinning.EventSampler.sample_uniform_distribution"]], "attnhp (class in easy_tpp.model.torch_model.torch_attnhp)": [[10, "easy_tpp.model.torch_model.torch_attnhp.AttNHP"]], "__init__() (easy_tpp.model.torch_model.torch_attnhp.attnhp method)": [[10, "easy_tpp.model.torch_model.torch_attnhp.AttNHP.__init__"]], "compute_intensities_at_sample_times() (easy_tpp.model.torch_model.torch_attnhp.attnhp method)": [[10, "easy_tpp.model.torch_model.torch_attnhp.AttNHP.compute_intensities_at_sample_times"]], "compute_states_at_sample_times() (easy_tpp.model.torch_model.torch_attnhp.attnhp method)": [[10, "easy_tpp.model.torch_model.torch_attnhp.AttNHP.compute_states_at_sample_times"]], "compute_temporal_embedding() (easy_tpp.model.torch_model.torch_attnhp.attnhp method)": [[10, "easy_tpp.model.torch_model.torch_attnhp.AttNHP.compute_temporal_embedding"]], "easy_tpp.model.torch_model.torch_attnhp": [[10, "module-easy_tpp.model.torch_model.torch_attnhp"]], "forward() (easy_tpp.model.torch_model.torch_attnhp.attnhp method)": [[10, "easy_tpp.model.torch_model.torch_attnhp.AttNHP.forward"]], "forward_pass() (easy_tpp.model.torch_model.torch_attnhp.attnhp method)": [[10, "easy_tpp.model.torch_model.torch_attnhp.AttNHP.forward_pass"]], "loglike_loss() (easy_tpp.model.torch_model.torch_attnhp.attnhp method)": [[10, "easy_tpp.model.torch_model.torch_attnhp.AttNHP.loglike_loss"]], "make_combined_att_mask() (easy_tpp.model.torch_model.torch_attnhp.attnhp method)": [[10, "easy_tpp.model.torch_model.torch_attnhp.AttNHP.make_combined_att_mask"]], "make_layer_mask() (easy_tpp.model.torch_model.torch_attnhp.attnhp method)": [[10, "easy_tpp.model.torch_model.torch_attnhp.AttNHP.make_layer_mask"]], "seq_encoding() (easy_tpp.model.torch_model.torch_attnhp.attnhp method)": [[10, "easy_tpp.model.torch_model.torch_attnhp.AttNHP.seq_encoding"]], "dnn (class in easy_tpp.model.torch_model.torch_baselayer)": [[11, "easy_tpp.model.torch_model.torch_baselayer.DNN"]], "encoderlayer (class in easy_tpp.model.torch_model.torch_baselayer)": [[11, "easy_tpp.model.torch_model.torch_baselayer.EncoderLayer"]], "gelu (class in easy_tpp.model.torch_model.torch_baselayer)": [[11, "easy_tpp.model.torch_model.torch_baselayer.GELU"]], "identity (class in easy_tpp.model.torch_model.torch_baselayer)": [[11, "easy_tpp.model.torch_model.torch_baselayer.Identity"]], "multiheadattention (class in easy_tpp.model.torch_model.torch_baselayer)": [[11, "easy_tpp.model.torch_model.torch_baselayer.MultiHeadAttention"]], "sublayerconnection (class in easy_tpp.model.torch_model.torch_baselayer)": [[11, "easy_tpp.model.torch_model.torch_baselayer.SublayerConnection"]], "timepositionalencoding (class in easy_tpp.model.torch_model.torch_baselayer)": [[11, "easy_tpp.model.torch_model.torch_baselayer.TimePositionalEncoding"]], "timeshiftedpositionalencoding (class in easy_tpp.model.torch_model.torch_baselayer)": [[11, "easy_tpp.model.torch_model.torch_baselayer.TimeShiftedPositionalEncoding"]], "__init__() (easy_tpp.model.torch_model.torch_baselayer.dnn method)": [[11, "easy_tpp.model.torch_model.torch_baselayer.DNN.__init__"]], "__init__() (easy_tpp.model.torch_model.torch_baselayer.encoderlayer method)": [[11, "easy_tpp.model.torch_model.torch_baselayer.EncoderLayer.__init__"]], "__init__() (easy_tpp.model.torch_model.torch_baselayer.multiheadattention method)": [[11, "easy_tpp.model.torch_model.torch_baselayer.MultiHeadAttention.__init__"]], "__init__() (easy_tpp.model.torch_model.torch_baselayer.sublayerconnection method)": [[11, "easy_tpp.model.torch_model.torch_baselayer.SublayerConnection.__init__"]], "__init__() (easy_tpp.model.torch_model.torch_baselayer.timepositionalencoding method)": [[11, "easy_tpp.model.torch_model.torch_baselayer.TimePositionalEncoding.__init__"]], "__init__() (easy_tpp.model.torch_model.torch_baselayer.timeshiftedpositionalencoding method)": [[11, "easy_tpp.model.torch_model.torch_baselayer.TimeShiftedPositionalEncoding.__init__"]], "activation_layer() (in module easy_tpp.model.torch_model.torch_baselayer)": [[11, "easy_tpp.model.torch_model.torch_baselayer.activation_layer"]], "easy_tpp.model.torch_model.torch_baselayer": [[11, "module-easy_tpp.model.torch_model.torch_baselayer"]], "forward() (easy_tpp.model.torch_model.torch_baselayer.dnn method)": [[11, "easy_tpp.model.torch_model.torch_baselayer.DNN.forward"]], "forward() (easy_tpp.model.torch_model.torch_baselayer.encoderlayer method)": [[11, "easy_tpp.model.torch_model.torch_baselayer.EncoderLayer.forward"]], "forward() (easy_tpp.model.torch_model.torch_baselayer.gelu method)": [[11, "easy_tpp.model.torch_model.torch_baselayer.GELU.forward"]], "forward() (easy_tpp.model.torch_model.torch_baselayer.identity method)": [[11, "easy_tpp.model.torch_model.torch_baselayer.Identity.forward"]], "forward() (easy_tpp.model.torch_model.torch_baselayer.multiheadattention method)": [[11, "easy_tpp.model.torch_model.torch_baselayer.MultiHeadAttention.forward"]], "forward() (easy_tpp.model.torch_model.torch_baselayer.sublayerconnection method)": [[11, "easy_tpp.model.torch_model.torch_baselayer.SublayerConnection.forward"]], "forward() (easy_tpp.model.torch_model.torch_baselayer.timepositionalencoding method)": [[11, "easy_tpp.model.torch_model.torch_baselayer.TimePositionalEncoding.forward"]], "forward() (easy_tpp.model.torch_model.torch_baselayer.timeshiftedpositionalencoding method)": [[11, "easy_tpp.model.torch_model.torch_baselayer.TimeShiftedPositionalEncoding.forward"]], "torchbasemodel (class in easy_tpp.model.torch_model.torch_basemodel)": [[12, "easy_tpp.model.torch_model.torch_basemodel.TorchBaseModel"]], "__init__() (easy_tpp.model.torch_model.torch_basemodel.torchbasemodel method)": [[12, "easy_tpp.model.torch_model.torch_basemodel.TorchBaseModel.__init__"]], "compute_loglikelihood() (easy_tpp.model.torch_model.torch_basemodel.torchbasemodel method)": [[12, "easy_tpp.model.torch_model.torch_basemodel.TorchBaseModel.compute_loglikelihood"]], "easy_tpp.model.torch_model.torch_basemodel": [[12, "module-easy_tpp.model.torch_model.torch_basemodel"]], "generate_model_from_config() (easy_tpp.model.torch_model.torch_basemodel.torchbasemodel static method)": [[12, "easy_tpp.model.torch_model.torch_basemodel.TorchBaseModel.generate_model_from_config"]], "get_logits_at_last_step() (easy_tpp.model.torch_model.torch_basemodel.torchbasemodel static method)": [[12, "easy_tpp.model.torch_model.torch_basemodel.TorchBaseModel.get_logits_at_last_step"]], "make_dtime_loss_samples() (easy_tpp.model.torch_model.torch_basemodel.torchbasemodel method)": [[12, "easy_tpp.model.torch_model.torch_basemodel.TorchBaseModel.make_dtime_loss_samples"]], "predict_multi_step_since_last_event() (easy_tpp.model.torch_model.torch_basemodel.torchbasemodel method)": [[12, "easy_tpp.model.torch_model.torch_basemodel.TorchBaseModel.predict_multi_step_since_last_event"]], "predict_one_step_at_every_event() (easy_tpp.model.torch_model.torch_basemodel.torchbasemodel method)": [[12, "easy_tpp.model.torch_model.torch_basemodel.TorchBaseModel.predict_one_step_at_every_event"]], "conttimelstmcell (class in easy_tpp.model.torch_model.torch_nhp)": [[13, "easy_tpp.model.torch_model.torch_nhp.ContTimeLSTMCell"]], "nhp (class in easy_tpp.model.torch_model.torch_nhp)": [[13, "easy_tpp.model.torch_model.torch_nhp.NHP"]], "__init__() (easy_tpp.model.torch_model.torch_nhp.conttimelstmcell method)": [[13, "easy_tpp.model.torch_model.torch_nhp.ContTimeLSTMCell.__init__"]], "__init__() (easy_tpp.model.torch_model.torch_nhp.nhp method)": [[13, "easy_tpp.model.torch_model.torch_nhp.NHP.__init__"]], "compute_intensities_at_sample_times() (easy_tpp.model.torch_model.torch_nhp.nhp method)": [[13, "easy_tpp.model.torch_model.torch_nhp.NHP.compute_intensities_at_sample_times"]], "compute_states_at_sample_times() (easy_tpp.model.torch_model.torch_nhp.nhp method)": [[13, "easy_tpp.model.torch_model.torch_nhp.NHP.compute_states_at_sample_times"]], "decay() (easy_tpp.model.torch_model.torch_nhp.conttimelstmcell method)": [[13, "easy_tpp.model.torch_model.torch_nhp.ContTimeLSTMCell.decay"]], "easy_tpp.model.torch_model.torch_nhp": [[13, "module-easy_tpp.model.torch_model.torch_nhp"]], "forward() (easy_tpp.model.torch_model.torch_nhp.conttimelstmcell method)": [[13, "easy_tpp.model.torch_model.torch_nhp.ContTimeLSTMCell.forward"]], "forward() (easy_tpp.model.torch_model.torch_nhp.nhp method)": [[13, "easy_tpp.model.torch_model.torch_nhp.NHP.forward"]], "init_dense_layer() (easy_tpp.model.torch_model.torch_nhp.conttimelstmcell method)": [[13, "easy_tpp.model.torch_model.torch_nhp.ContTimeLSTMCell.init_dense_layer"]], "init_state() (easy_tpp.model.torch_model.torch_nhp.nhp method)": [[13, "easy_tpp.model.torch_model.torch_nhp.NHP.init_state"]], "loglike_loss() (easy_tpp.model.torch_model.torch_nhp.nhp method)": [[13, "easy_tpp.model.torch_model.torch_nhp.NHP.loglike_loss"]], "eventsampler (class in easy_tpp.model.torch_model.torch_thinning)": [[14, "easy_tpp.model.torch_model.torch_thinning.EventSampler"]], "__init__() (easy_tpp.model.torch_model.torch_thinning.eventsampler method)": [[14, "easy_tpp.model.torch_model.torch_thinning.EventSampler.__init__"]], "compute_intensity_upper_bound() (easy_tpp.model.torch_model.torch_thinning.eventsampler method)": [[14, "easy_tpp.model.torch_model.torch_thinning.EventSampler.compute_intensity_upper_bound"]], "draw_next_time_one_step() (easy_tpp.model.torch_model.torch_thinning.eventsampler method)": [[14, "easy_tpp.model.torch_model.torch_thinning.EventSampler.draw_next_time_one_step"]], "easy_tpp.model.torch_model.torch_thinning": [[14, "module-easy_tpp.model.torch_model.torch_thinning"]], "sample_accept() (easy_tpp.model.torch_model.torch_thinning.eventsampler method)": [[14, "easy_tpp.model.torch_model.torch_thinning.EventSampler.sample_accept"]], "sample_exp_distribution() (easy_tpp.model.torch_model.torch_thinning.eventsampler method)": [[14, "easy_tpp.model.torch_model.torch_thinning.EventSampler.sample_exp_distribution"]], "sample_uniform_distribution() (easy_tpp.model.torch_model.torch_thinning.eventsampler method)": [[14, "easy_tpp.model.torch_model.torch_thinning.EventSampler.sample_uniform_distribution"]], "tppdatacollator (class in easy_tpp.preprocess.data_collator)": [[15, "easy_tpp.preprocess.data_collator.TPPDataCollator"]], "__init__() (easy_tpp.preprocess.data_collator.tppdatacollator method)": [[15, "easy_tpp.preprocess.data_collator.TPPDataCollator.__init__"]], "easy_tpp.preprocess.data_collator": [[15, "module-easy_tpp.preprocess.data_collator"]], "easy_tpp.preprocess.data_loader": [[16, "module-easy_tpp.preprocess.data_loader"]], "tppdataset (class in easy_tpp.preprocess.dataset)": [[17, "easy_tpp.preprocess.dataset.TPPDataset"]], "__init__() (easy_tpp.preprocess.dataset.tppdataset method)": [[17, "easy_tpp.preprocess.dataset.TPPDataset.__init__"]], "easy_tpp.preprocess.dataset": [[17, "module-easy_tpp.preprocess.dataset"]], "to_tf_dataset() (easy_tpp.preprocess.dataset.tppdataset method)": [[17, "easy_tpp.preprocess.dataset.TPPDataset.to_tf_dataset"]], "batchencoding (class in easy_tpp.preprocess.event_tokenizer)": [[18, "easy_tpp.preprocess.event_tokenizer.BatchEncoding"]], "eventtokenizer (class in easy_tpp.preprocess.event_tokenizer)": [[18, "easy_tpp.preprocess.event_tokenizer.EventTokenizer"]], "__init__() (easy_tpp.preprocess.event_tokenizer.batchencoding method)": [[18, "easy_tpp.preprocess.event_tokenizer.BatchEncoding.__init__"]], "__init__() (easy_tpp.preprocess.event_tokenizer.eventtokenizer method)": [[18, "easy_tpp.preprocess.event_tokenizer.EventTokenizer.__init__"]], "convert_to_tensors() (easy_tpp.preprocess.event_tokenizer.batchencoding method)": [[18, "easy_tpp.preprocess.event_tokenizer.BatchEncoding.convert_to_tensors"]], "easy_tpp.preprocess.event_tokenizer": [[18, "module-easy_tpp.preprocess.event_tokenizer"]], "items() (easy_tpp.preprocess.event_tokenizer.batchencoding method)": [[18, "easy_tpp.preprocess.event_tokenizer.BatchEncoding.items"]], "keys() (easy_tpp.preprocess.event_tokenizer.batchencoding method)": [[18, "easy_tpp.preprocess.event_tokenizer.BatchEncoding.keys"]], "make_attn_mask_for_pad_sequence() (easy_tpp.preprocess.event_tokenizer.eventtokenizer method)": [[18, "easy_tpp.preprocess.event_tokenizer.EventTokenizer.make_attn_mask_for_pad_sequence"]], "make_pad_sequence() (easy_tpp.preprocess.event_tokenizer.eventtokenizer static method)": [[18, "easy_tpp.preprocess.event_tokenizer.EventTokenizer.make_pad_sequence"]], "make_type_mask_for_pad_sequence() (easy_tpp.preprocess.event_tokenizer.eventtokenizer method)": [[18, "easy_tpp.preprocess.event_tokenizer.EventTokenizer.make_type_mask_for_pad_sequence"]], "pad() (easy_tpp.preprocess.event_tokenizer.eventtokenizer method)": [[18, "easy_tpp.preprocess.event_tokenizer.EventTokenizer.pad"]], "to() (easy_tpp.preprocess.event_tokenizer.batchencoding method)": [[18, "easy_tpp.preprocess.event_tokenizer.BatchEncoding.to"]], "values() (easy_tpp.preprocess.event_tokenizer.batchencoding method)": [[18, "easy_tpp.preprocess.event_tokenizer.BatchEncoding.values"]], "backend (class in easy_tpp.utils.const)": [[19, "easy_tpp.utils.const.Backend"]], "explicitenum (class in easy_tpp.utils.const)": [[19, "easy_tpp.utils.const.ExplicitEnum"]], "logconst (class in easy_tpp.utils.const)": [[19, "easy_tpp.utils.const.LogConst"]], "lossfunction (class in easy_tpp.utils.const)": [[19, "easy_tpp.utils.const.LossFunction"]], "paddingstrategy (class in easy_tpp.utils.const)": [[19, "easy_tpp.utils.const.PaddingStrategy"]], "predoutputindex (class in easy_tpp.utils.const)": [[19, "easy_tpp.utils.const.PredOutputIndex"]], "runnerphase (class in easy_tpp.utils.const)": [[19, "easy_tpp.utils.const.RunnerPhase"]], "tensortype (class in easy_tpp.utils.const)": [[19, "easy_tpp.utils.const.TensorType"]], "truncationstrategy (class in easy_tpp.utils.const)": [[19, "easy_tpp.utils.const.TruncationStrategy"]], "easy_tpp.utils.const": [[19, "module-easy_tpp.utils.const"]], "easy_tpp.utils.generic": [[20, "module-easy_tpp.utils.generic"]], "is_numpy_array() (in module easy_tpp.utils.generic)": [[20, "easy_tpp.utils.generic.is_numpy_array"]], "is_tensor() (in module easy_tpp.utils.generic)": [[20, "easy_tpp.utils.generic.is_tensor"]], "is_tf_symbolic_tensor() (in module easy_tpp.utils.generic)": [[20, "easy_tpp.utils.generic.is_tf_symbolic_tensor"]], "is_tf_tensor() (in module easy_tpp.utils.generic)": [[20, "easy_tpp.utils.generic.is_tf_tensor"]], "is_torch_device() (in module easy_tpp.utils.generic)": [[20, "easy_tpp.utils.generic.is_torch_device"]], "is_torch_dtype() (in module easy_tpp.utils.generic)": [[20, "easy_tpp.utils.generic.is_torch_dtype"]], "is_torch_tensor() (in module easy_tpp.utils.generic)": [[20, "easy_tpp.utils.generic.is_torch_tensor"]], "easy_tpp.utils.import_utils": [[21, "module-easy_tpp.utils.import_utils"]], "customformatter (class in easy_tpp.utils.log_utils)": [[22, "easy_tpp.utils.log_utils.CustomFormatter"]], "easy_tpp.utils.log_utils": [[22, "module-easy_tpp.utils.log_utils"]], "format() (easy_tpp.utils.log_utils.customformatter method)": [[22, "easy_tpp.utils.log_utils.CustomFormatter.format"]], "metricstracker (class in easy_tpp.utils.metrics)": [[23, "easy_tpp.utils.metrics.MetricsTracker"]], "__init__() (easy_tpp.utils.metrics.metricstracker method)": [[23, "easy_tpp.utils.metrics.MetricsTracker.__init__"]], "easy_tpp.utils.metrics": [[23, "module-easy_tpp.utils.metrics"]], "update_best() (easy_tpp.utils.metrics.metricstracker method)": [[23, "easy_tpp.utils.metrics.MetricsTracker.update_best"]], "array_pad_cols() (in module easy_tpp.utils.misc)": [[24, "easy_tpp.utils.misc.array_pad_cols"]], "concat_element() (in module easy_tpp.utils.misc)": [[24, "easy_tpp.utils.misc.concat_element"]], "create_folder() (in module easy_tpp.utils.misc)": [[24, "easy_tpp.utils.misc.create_folder"]], "dict_deep_update() (in module easy_tpp.utils.misc)": [[24, "easy_tpp.utils.misc.dict_deep_update"]], "easy_tpp.utils.misc": [[24, "module-easy_tpp.utils.misc"]], "has_key() (in module easy_tpp.utils.misc)": [[24, "easy_tpp.utils.misc.has_key"]], "load_pickle() (in module easy_tpp.utils.misc)": [[24, "easy_tpp.utils.misc.load_pickle"]], "load_yaml_config() (in module easy_tpp.utils.misc)": [[24, "easy_tpp.utils.misc.load_yaml_config"]], "make_config_string() (in module easy_tpp.utils.misc)": [[24, "easy_tpp.utils.misc.make_config_string"]], "py_assert() (in module easy_tpp.utils.misc)": [[24, "easy_tpp.utils.misc.py_assert"]], "save_pickle() (in module easy_tpp.utils.misc)": [[24, "easy_tpp.utils.misc.save_pickle"]], "save_yaml_config() (in module easy_tpp.utils.misc)": [[24, "easy_tpp.utils.misc.save_yaml_config"]], "timer (class in easy_tpp.utils.multiprocess_utils)": [[25, "easy_tpp.utils.multiprocess_utils.Timer"]], "__init__() (easy_tpp.utils.multiprocess_utils.timer method)": [[25, "easy_tpp.utils.multiprocess_utils.Timer.__init__"]], "easy_tpp.utils.multiprocess_utils": [[25, "module-easy_tpp.utils.multiprocess_utils"]], "get_now_timestamp_id() (in module easy_tpp.utils.multiprocess_utils)": [[25, "easy_tpp.utils.multiprocess_utils.get_now_timestamp_id"]], "get_unique_id() (in module easy_tpp.utils.multiprocess_utils)": [[25, "easy_tpp.utils.multiprocess_utils.get_unique_id"]], "is_local_master_process() (in module easy_tpp.utils.multiprocess_utils)": [[25, "easy_tpp.utils.multiprocess_utils.is_local_master_process"]], "is_master_process() (in module easy_tpp.utils.multiprocess_utils)": [[25, "easy_tpp.utils.multiprocess_utils.is_master_process"]], "parse_uri_to_protocol_and_path() (in module easy_tpp.utils.multiprocess_utils)": [[25, "easy_tpp.utils.multiprocess_utils.parse_uri_to_protocol_and_path"]], "easy_tpp.utils.ode_utils": [[26, "module-easy_tpp.utils.ode_utils"]], "euler_step_method() (in module easy_tpp.utils.ode_utils)": [[26, "easy_tpp.utils.ode_utils.euler_step_method"]], "ode_update_op() (in module easy_tpp.utils.ode_utils)": [[26, "easy_tpp.utils.ode_utils.ode_update_op"]], "rk2_step_method() (in module easy_tpp.utils.ode_utils)": [[26, "easy_tpp.utils.ode_utils.rk2_step_method"]], "rk4_step_method() (in module easy_tpp.utils.ode_utils)": [[26, "easy_tpp.utils.ode_utils.rk4_step_method"]], "registrable (class in easy_tpp.utils.registrable)": [[27, "easy_tpp.utils.registrable.Registrable"]], "by_name() (easy_tpp.utils.registrable.registrable class method)": [[27, "easy_tpp.utils.registrable.Registrable.by_name"]], "easy_tpp.utils.registrable": [[27, "module-easy_tpp.utils.registrable"]], "list_available() (easy_tpp.utils.registrable.registrable class method)": [[27, "easy_tpp.utils.registrable.Registrable.list_available"]], "register() (easy_tpp.utils.registrable.registrable class method)": [[27, "easy_tpp.utils.registrable.Registrable.register"]], "resolve_class_name() (easy_tpp.utils.registrable.registrable class method)": [[27, "easy_tpp.utils.registrable.Registrable.resolve_class_name"]], "count_model_params() (in module easy_tpp.utils.tf_utils)": [[28, "easy_tpp.utils.tf_utils.count_model_params"]], "create_tensor() (in module easy_tpp.utils.tf_utils)": [[28, "easy_tpp.utils.tf_utils.create_tensor"]], "easy_tpp.utils.tf_utils": [[28, "module-easy_tpp.utils.tf_utils"]], "get_shape_list() (in module easy_tpp.utils.tf_utils)": [[28, "easy_tpp.utils.tf_utils.get_shape_list"]], "set_device() (in module easy_tpp.utils.tf_utils)": [[28, "easy_tpp.utils.tf_utils.set_device"]], "set_optimizer() (in module easy_tpp.utils.tf_utils)": [[28, "easy_tpp.utils.tf_utils.set_optimizer"]], "set_seed() (in module easy_tpp.utils.tf_utils)": [[28, "easy_tpp.utils.tf_utils.set_seed"]], "swap_axes() (in module easy_tpp.utils.tf_utils)": [[28, "easy_tpp.utils.tf_utils.swap_axes"]], "tensordot() (in module easy_tpp.utils.tf_utils)": [[28, "easy_tpp.utils.tf_utils.tensordot"]], "count_model_params() (in module easy_tpp.utils.torch_utils)": [[29, "easy_tpp.utils.torch_utils.count_model_params"]], "easy_tpp.utils.torch_utils": [[29, "module-easy_tpp.utils.torch_utils"]], "set_device() (in module easy_tpp.utils.torch_utils)": [[29, "easy_tpp.utils.torch_utils.set_device"]], "set_optimizer() (in module easy_tpp.utils.torch_utils)": [[29, "easy_tpp.utils.torch_utils.set_optimizer"]], "set_seed() (in module easy_tpp.utils.torch_utils)": [[29, "easy_tpp.utils.torch_utils.set_seed"]], "baseconfig (class in config_factory)": [[34, "config_factory.BaseConfig"]], "config (class in config_factory)": [[34, "config_factory.Config"]], "dataconfig (class in config_factory)": [[34, "config_factory.DataConfig"]], "dataspecconfig (class in config_factory)": [[34, "config_factory.DataSpecConfig"]], "hpoconfig (class in config_factory)": [[34, "config_factory.HPOConfig"]], "hporunnerconfig (class in config_factory)": [[34, "config_factory.HPORunnerConfig"]], "modelconfig (class in config_factory)": [[34, "config_factory.ModelConfig"]], "runnerconfig (class in config_factory)": [[34, "config_factory.RunnerConfig"]], "__init__() (config_factory.baseconfig method)": [[34, "config_factory.BaseConfig.__init__"]], "__init__() (config_factory.dataconfig method)": [[34, "config_factory.DataConfig.__init__"]], "__init__() (config_factory.dataspecconfig method)": [[34, "config_factory.DataSpecConfig.__init__"]], "__init__() (config_factory.hpoconfig method)": [[34, "config_factory.HPOConfig.__init__"]], "__init__() (config_factory.hporunnerconfig method)": [[34, "config_factory.HPORunnerConfig.__init__"]], "__init__() (config_factory.modelconfig method)": [[34, "config_factory.ModelConfig.__init__"]], "__init__() (config_factory.runnerconfig method)": [[34, "config_factory.RunnerConfig.__init__"]], "build_from_yaml_file() (config_factory.config static method)": [[34, "config_factory.Config.build_from_yaml_file"]], "config_factory": [[34, "module-config_factory"]], "copy() (config_factory.baseconfig method)": [[34, "config_factory.BaseConfig.copy"]], "copy() (config_factory.config method)": [[34, "config_factory.Config.copy"]], "copy() (config_factory.dataconfig method)": [[34, "config_factory.DataConfig.copy"]], "copy() (config_factory.dataspecconfig method)": [[34, "config_factory.DataSpecConfig.copy"]], "copy() (config_factory.hpoconfig method)": [[34, "config_factory.HPOConfig.copy"]], "copy() (config_factory.hporunnerconfig method)": [[34, "config_factory.HPORunnerConfig.copy"]], "copy() (config_factory.modelconfig method)": [[34, "config_factory.ModelConfig.copy"]], "copy() (config_factory.runnerconfig method)": [[34, "config_factory.RunnerConfig.copy"]], "ensure_valid_config() (config_factory.runnerconfig method)": [[34, "config_factory.RunnerConfig.ensure_valid_config"]], "get() (config_factory.config method)": [[34, "config_factory.Config.get"]], "get_data_dir() (config_factory.dataconfig method)": [[34, "config_factory.DataConfig.get_data_dir"]], "get_metric_direction() (config_factory.runnerconfig method)": [[34, "config_factory.RunnerConfig.get_metric_direction"]], "get_metric_functions() (config_factory.runnerconfig method)": [[34, "config_factory.RunnerConfig.get_metric_functions"]], "get_yaml_config() (config_factory.baseconfig method)": [[34, "config_factory.BaseConfig.get_yaml_config"]], "get_yaml_config() (config_factory.config method)": [[34, "config_factory.Config.get_yaml_config"]], "get_yaml_config() (config_factory.dataconfig method)": [[34, "config_factory.DataConfig.get_yaml_config"]], "get_yaml_config() (config_factory.dataspecconfig method)": [[34, "config_factory.DataSpecConfig.get_yaml_config"]], "get_yaml_config() (config_factory.hpoconfig method)": [[34, "config_factory.HPOConfig.get_yaml_config"]], "get_yaml_config() (config_factory.modelconfig method)": [[34, "config_factory.ModelConfig.get_yaml_config"]], "get_yaml_config() (config_factory.runnerconfig method)": [[34, "config_factory.RunnerConfig.get_yaml_config"]], "parse_from_yaml_config() (config_factory.baseconfig static method)": [[34, "config_factory.BaseConfig.parse_from_yaml_config"]], "parse_from_yaml_config() (config_factory.config static method)": [[34, "config_factory.Config.parse_from_yaml_config"]], "parse_from_yaml_config() (config_factory.dataconfig static method)": [[34, "config_factory.DataConfig.parse_from_yaml_config"]], "parse_from_yaml_config() (config_factory.dataspecconfig static method)": [[34, "config_factory.DataSpecConfig.parse_from_yaml_config"]], "parse_from_yaml_config() (config_factory.hpoconfig static method)": [[34, "config_factory.HPOConfig.parse_from_yaml_config"]], "parse_from_yaml_config() (config_factory.hporunnerconfig static method)": [[34, "config_factory.HPORunnerConfig.parse_from_yaml_config"]], "parse_from_yaml_config() (config_factory.modelconfig static method)": [[34, "config_factory.ModelConfig.parse_from_yaml_config"]], "parse_from_yaml_config() (config_factory.runnerconfig static method)": [[34, "config_factory.RunnerConfig.parse_from_yaml_config"]], "pop() (config_factory.config method)": [[34, "config_factory.Config.pop"]], "save_to_yaml_file() (config_factory.config method)": [[34, "config_factory.Config.save_to_yaml_file"]], "set() (config_factory.config method)": [[34, "config_factory.Config.set"]], "set_backend() (config_factory.baseconfig static method)": [[34, "config_factory.BaseConfig.set_backend"]], "storage_path (config_factory.hpoconfig property)": [[34, "config_factory.HPOConfig.storage_path"]], "storage_protocol (config_factory.hpoconfig property)": [[34, "config_factory.HPOConfig.storage_protocol"]], "update() (config_factory.config method)": [[34, "config_factory.Config.update"]], "update_config() (config_factory.runnerconfig method)": [[34, "config_factory.RunnerConfig.update_config"]], "easy_tpp.model.tf_model": [[36, "module-easy_tpp.model.tf_model"]], "easy_tpp.model.torch_model": [[36, "module-easy_tpp.model.torch_model"]], "eventtokenizer (class in easy_tpp.preprocess)": [[37, "easy_tpp.preprocess.EventTokenizer"]], "tppdataset (class in easy_tpp.preprocess)": [[37, "easy_tpp.preprocess.TPPDataset"]], "__init__() (easy_tpp.preprocess.eventtokenizer method)": [[37, "easy_tpp.preprocess.EventTokenizer.__init__"]], "__init__() (easy_tpp.preprocess.tppdataset method)": [[37, "easy_tpp.preprocess.TPPDataset.__init__"]], "easy_tpp.preprocess": [[37, "module-easy_tpp.preprocess"]], "make_attn_mask_for_pad_sequence() (easy_tpp.preprocess.eventtokenizer method)": [[37, "easy_tpp.preprocess.EventTokenizer.make_attn_mask_for_pad_sequence"]], "make_pad_sequence() (easy_tpp.preprocess.eventtokenizer static method)": [[37, "easy_tpp.preprocess.EventTokenizer.make_pad_sequence"]], "make_type_mask_for_pad_sequence() (easy_tpp.preprocess.eventtokenizer method)": [[37, "easy_tpp.preprocess.EventTokenizer.make_type_mask_for_pad_sequence"]], "pad() (easy_tpp.preprocess.eventtokenizer method)": [[37, "easy_tpp.preprocess.EventTokenizer.pad"]], "to_tf_dataset() (easy_tpp.preprocess.tppdataset method)": [[37, "easy_tpp.preprocess.TPPDataset.to_tf_dataset"]], "runner (class in runner)": [[38, "runner.Runner"]], "tpprunner (class in runner)": [[38, "runner.TPPRunner"]], "__init__() (runner.runner method)": [[38, "runner.Runner.__init__"]], "__init__() (runner.tpprunner method)": [[38, "runner.TPPRunner.__init__"]], "build_from_config() (runner.runner static method)": [[38, "runner.Runner.build_from_config"]], "evaluate() (runner.runner method)": [[38, "runner.Runner.evaluate"]], "gen() (runner.runner method)": [[38, "runner.Runner.gen"]], "get_config() (runner.runner method)": [[38, "runner.Runner.get_config"]], "get_model_dir() (runner.runner method)": [[38, "runner.Runner.get_model_dir"]], "run() (runner.runner method)": [[38, "runner.Runner.run"]], "run_one_epoch() (runner.tpprunner method)": [[38, "runner.TPPRunner.run_one_epoch"]], "runner": [[38, "module-runner"]], "save() (runner.runner method)": [[38, "runner.Runner.save"]], "save_log() (runner.runner method)": [[38, "runner.Runner.save_log"]], "set_model_dir() (runner.runner method)": [[38, "runner.Runner.set_model_dir"]], "train() (runner.runner method)": [[38, "runner.Runner.train"]], "explicitenum (class in easy_tpp.utils)": [[39, "easy_tpp.utils.ExplicitEnum"]], "logconst (class in easy_tpp.utils)": [[39, "easy_tpp.utils.LogConst"]], "metricstracker (class in easy_tpp.utils)": [[39, "easy_tpp.utils.MetricsTracker"]], "paddingstrategy (class in easy_tpp.utils)": [[39, "easy_tpp.utils.PaddingStrategy"]], "registrable (class in easy_tpp.utils)": [[39, "easy_tpp.utils.Registrable"]], "runnerphase (class in easy_tpp.utils)": [[39, "easy_tpp.utils.RunnerPhase"]], "timer (class in easy_tpp.utils)": [[39, "easy_tpp.utils.Timer"]], "truncationstrategy (class in easy_tpp.utils)": [[39, "easy_tpp.utils.TruncationStrategy"]], "__init__() (easy_tpp.utils.metricstracker method)": [[39, "easy_tpp.utils.MetricsTracker.__init__"]], "__init__() (easy_tpp.utils.timer method)": [[39, "easy_tpp.utils.Timer.__init__"]], "array_pad_cols() (in module easy_tpp.utils)": [[39, "easy_tpp.utils.array_pad_cols"]], "by_name() (easy_tpp.utils.registrable class method)": [[39, "easy_tpp.utils.Registrable.by_name"]], "concat_element() (in module easy_tpp.utils)": [[39, "easy_tpp.utils.concat_element"]], "count_model_params() (in module easy_tpp.utils)": [[39, "easy_tpp.utils.count_model_params"]], "create_folder() (in module easy_tpp.utils)": [[39, "easy_tpp.utils.create_folder"]], "dict_deep_update() (in module easy_tpp.utils)": [[39, "easy_tpp.utils.dict_deep_update"]], "easy_tpp.utils": [[39, "module-easy_tpp.utils"]], "has_key() (in module easy_tpp.utils)": [[39, "easy_tpp.utils.has_key"]], "is_local_master_process() (in module easy_tpp.utils)": [[39, "easy_tpp.utils.is_local_master_process"]], "is_master_process() (in module easy_tpp.utils)": [[39, "easy_tpp.utils.is_master_process"]], "is_numpy_array() (in module easy_tpp.utils)": [[39, "easy_tpp.utils.is_numpy_array"]], "is_torch_device() (in module easy_tpp.utils)": [[39, "easy_tpp.utils.is_torch_device"]], "list_available() (easy_tpp.utils.registrable class method)": [[39, "easy_tpp.utils.Registrable.list_available"]], "load_pickle() (in module easy_tpp.utils)": [[39, "easy_tpp.utils.load_pickle"]], "load_yaml_config() (in module easy_tpp.utils)": [[39, "easy_tpp.utils.load_yaml_config"]], "make_config_string() (in module easy_tpp.utils)": [[39, "easy_tpp.utils.make_config_string"]], "parse_uri_to_protocol_and_path() (in module easy_tpp.utils)": [[39, "easy_tpp.utils.parse_uri_to_protocol_and_path"]], "py_assert() (in module easy_tpp.utils)": [[39, "easy_tpp.utils.py_assert"]], "register() (easy_tpp.utils.registrable class method)": [[39, "easy_tpp.utils.Registrable.register"]], "resolve_class_name() (easy_tpp.utils.registrable class method)": [[39, "easy_tpp.utils.Registrable.resolve_class_name"]], "rk4_step_method() (in module easy_tpp.utils)": [[39, "easy_tpp.utils.rk4_step_method"]], "save_pickle() (in module easy_tpp.utils)": [[39, "easy_tpp.utils.save_pickle"]], "save_yaml_config() (in module easy_tpp.utils)": [[39, "easy_tpp.utils.save_yaml_config"]], "set_device() (in module easy_tpp.utils)": [[39, "easy_tpp.utils.set_device"]], "set_optimizer() (in module easy_tpp.utils)": [[39, "easy_tpp.utils.set_optimizer"]], "set_seed() (in module easy_tpp.utils)": [[39, "easy_tpp.utils.set_seed"]], "update_best() (easy_tpp.utils.metricstracker method)": [[39, "easy_tpp.utils.MetricsTracker.update_best"]], "tfmodelwrapper (class in tf_wrapper)": [[40, "tf_wrapper.TfModelWrapper"]], "torchmodelwrapper (class in torch_wrapper)": [[40, "torch_wrapper.TorchModelWrapper"]], "__init__() (tf_wrapper.tfmodelwrapper method)": [[40, "tf_wrapper.TfModelWrapper.__init__"]], "__init__() (torch_wrapper.torchmodelwrapper method)": [[40, "torch_wrapper.TorchModelWrapper.__init__"]], "close_summary() (tf_wrapper.tfmodelwrapper method)": [[40, "tf_wrapper.TfModelWrapper.close_summary"]], "close_summary() (torch_wrapper.torchmodelwrapper method)": [[40, "torch_wrapper.TorchModelWrapper.close_summary"]], "restore() (tf_wrapper.tfmodelwrapper method)": [[40, "tf_wrapper.TfModelWrapper.restore"]], "restore() (torch_wrapper.torchmodelwrapper method)": [[40, "torch_wrapper.TorchModelWrapper.restore"]], "run_batch() (tf_wrapper.tfmodelwrapper method)": [[40, "tf_wrapper.TfModelWrapper.run_batch"]], "run_batch() (torch_wrapper.torchmodelwrapper method)": [[40, "torch_wrapper.TorchModelWrapper.run_batch"]], "save() (tf_wrapper.tfmodelwrapper method)": [[40, "tf_wrapper.TfModelWrapper.save"]], "save() (torch_wrapper.torchmodelwrapper method)": [[40, "torch_wrapper.TorchModelWrapper.save"]], "tf_wrapper": [[40, "module-tf_wrapper"]], "torch_wrapper": [[40, "module-torch_wrapper"]], "write_summary() (tf_wrapper.tfmodelwrapper method)": [[40, "tf_wrapper.TfModelWrapper.write_summary"]], "write_summary() (torch_wrapper.torchmodelwrapper method)": [[40, "torch_wrapper.TorchModelWrapper.write_summary"]]}})